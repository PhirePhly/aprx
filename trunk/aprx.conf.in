#
#  Sample configuration file for the APRX-2  -- an APRS iGate and Digipeater
#
# This configuration is structured with Apache HTTPD style tags
# which then contain subsystem parameters.
#
# Define the parameters in following order:
#   1)  <aprsis>     ** zero or one
#   2)  <logging>    ** zero or one
#   3)  <interface>  ** there can be multiple!
#   4)  <netbeacon>  ** zero to many
#   5)  <rfbeacon>   ** zero to many
#   6)  <digipeater> ** zero to many (at most one for each Tx)
#

<aprsis>
# The  aprsis-login  parameter: 
# Station callsignSSID used for relaying APRS frames into APRS-IS.
# This value MUST NOT match any possible AX.25 interface in
# the system!  Ignore this at your own peril...  The Call-SSIDs
# SSID value does not need to be numeric 1..15: "-R1" works too.
#
login     N0CALL-R1

# APRS-IS server name and portnumber.
# Every reconnect does re\-resolve the name to IP address.
# There can be as many definitions as you want, and they will be
# used in round\-robin fashion.  Heartbeat and filter definitions
# must follow each server definition.

#server	   igates.aprs.fi     14580
#server    finland.aprs2.net  14580
server    rotate.aprs.net    14580

# Some APRS-IS servers tell every about 20 seconds to all contact
# ports that they are there and alive. Others are just silent.
# Enable only if the server you use does present heartbeat.
# Recommended value 3*"heartbeat" + some  -> 120 (seconds)
#
#heartbeat-timeout   120

# Additional APRS-IS servers can be entered, by repeating following
# three configuration entries as many times as are needed.
#
#server            rotate.aprs.net 14580
#heartbeat-timeout 120

# APRS-IS server may support some filter commands.
# See:  http://www.aprs-is.net/javAPRSFilter.aspx
#
# Note: "m/.." filter does not work, because you can not beacon
#       same ID as is used on APRS-IS login - the aprsis login !
#
#filter "some filter specs in quotes"

</aprsis>

<logging>

# pidfile is UNIX way to tell that others that this program is
# running with given process-id number.  This has compiled-in
# default value of:  pidfile @VARRUN@/aprx.pid
#
pidfile @VARRUN@/aprx.pid


# rflog defines a rotatable file into which all RF-received packets
# are logged.
#
#rflog @VARLOG@/rf.log

# aprxlog defines a rotatable file into which most important 
# events on APRS-IS connection are logged, namely connects and
# disconnects.
#
#aprxlog @VARLOG@/aprx.log

# erlangfile defines a mmap():able binary file, which stores
# running sums of interfaces upon which the channel erlang
# estimator runs, and collects data.
# Depending on the system, it may be running on a filesystem
# that actually retains data over reboots, or it may not.
# With this backing store, the system does not loose cumulating
# erlang data over the current period, if the restart is quick,
# and does not stradle any exact minute.
# (Do restarts at 15 seconds over an even minute..)
# This file is around 0.5 MB per each interface talking APRS.
# Things go BADLY WRONG if this file can not be created or
# it is corrupted!
#
# Built-in default value is: @VARRUN@/aprx.state
#
#erlangfile @VARRUN@/aprx.state

# erlang-loglevel is config file version of the "-l" option
# pushing erlang data to syslog(3).
# Valid values are (possibly) following: NONE, LOG_DAEMON,
# LOG_FTP, LOG_LPR, LOG_MAIL, LOG_NEWS, LOG_USER, LOG_UUCP,
# LOG_LOCAL0, LOG_LOCAL1, LOG_LOCAL2, LOG_LOCAL3, LOG_LOCAL4,
# LOG_LOCAL5, LOG_LOCAL6, LOG_LOCAL7.  If the parameter value is
# not acceptable, list of accepted values are printed at startup.
#
#erlang-loglevel NONE

# erlanglog defines a rotatable file into which erlang data
# is written in text form.
#
#erlanglog @VARLOG@/erlang.log

# erlang-log1min option logs to syslog/file also 1 minute
# interval data from the program. (In addition to 10m and 60m.)
#
#erlang-log1min

</logging>


# AX.25 filters block selected messages matching on selected regular
# expressions.  The expressions are case sensitive, and AX.25 address
# elements are in all uppercase text.  There can be unlimited number
# of patterns, type fields are four: "source", "destination", "via",
# and "data".  These patterns can be used in addition to built-in
# hard-coded reject rules listed in documentation.
#
#ax25-reject-filter source      "^NOCALL"
#ax25-reject-filter destination "^NOCALL"
#ax25-reject-filter via         "^NOGATE"
#ax25-reject-filter data        "^\\?"


# ***********  Multiple <interface>  definitions follow   *********

# ax25-device  Lists AX.25 ports by their callsigns that in Linux
#              systems receive APRS packets.  If none are defined,
#              the AX.25 network receiver is not enabled.
#
# tx-ok        Boolean telling if this device is able to transmit.
#
#<interface>
#   ax25-device N0CALL
#   tx-ok false
#</interface>

# The  radio serial  option.  Parameters are:
#   - /dev/ttyUSB1    -- tty device
#   - 19200           -- baud rate, supported ones are:
#                        1200, 2400, 4800, 9600, 19200, 38400
#   - 8n1             -- 8-bits, no parity, one stop-bit,
#                        no other supported modes
#   - KISS/XORSUM/SMACK -- KISS mode variants
#     TNC2            -- non-KISS text format variant
#
#
#<interface>
# serial-device   /dev/ttyUSB0  19200 8n1    KISS
# <kiss-subif 0>
#    callsign N0CALL-14
#    tx-ok    false
# </kiss-subif>
#</interface>
#
#<interface>
# serial-device   /dev/ttyUSB1  19200 8n1    TNC2
# <kiss-subif 0>  # Actually it is not KISS subif, but "0" works for TNC2
#   callsign N0CALL-13
# </kiss-subif>
#</interface>
#

#
#  "KISS"                  - plain basic KISS mode
#  "XORSUM" alias "BPQCRC" - KISS with BPQ "CRC" byte
#  "SMACK"  alias "CRC16"  - KISS with better CRC
#  "TNC2"                  - TNC2 monitor format
#
# Additional/alternate options for the serial-device
#
# "timeout 900" sets a timeout monitor (in seconds) to make
#    reopen/reconnect if the (tcp) connection to radio has
#    failed somehow and nothing is heard. Local serial ports
#    do not (in general) need this.  At APRS silent sites
#    this may cause repeated reconnects, but it should not
#    harm either.  At busy sites this will handle reconnect
#    gracefully in case of network failures, and timeout
#    value can be shortened.
#
# "<kiss-subif 0>" sets optional multiplexer index on KISS type
#    connections. This id is specific for the multiplexer connection
#    on given port, and can be in range of 0 thru 7 for SMACK type
#    links, and up to 15 for KISS, and BPQ type links. 
#    The kiss-subif is settable only for KISS-type connections.
#    The subif 0 is settable for TNC2 monitor format.
#
# "callsign NAME" sets callsign used in statistics displays,
#    and when the message is sent to APRS-IS.
#    If none are given, then it will use physical port name.
#    There can be multiple callsign parameters, if each are
#    prefixed with their own  tncid  setting.
#
# "tx-ok true" enables transmit. System will then also require
#    that used callsign is valid for AX.25.
#
# "initstring" is of two parts, the keyword, and then a string.
#    initstring "\xC0\xC0\xFF\xC0\r\nMO 0\rKISS $01\r"
#    The initstring is a binary string,  "\x00" is encodable.
#    Of the usual C-style codes only "\r" and "\n" are understood.
#    The initstring is kiss-subif level option.
#
#</interface>


# The  radio tcp  option defines a connection to remote socket
# beyond which is a binary transparent connection to a serial
# port.  The parameter fields:  literal IP address (IPv4 or IPv6),
# then literal port number, and finally protocol mode.
# KISS-protocol parameters are same as with normal serial port.
#
#<interface>
# tcp-device  12.34.56.78  4001  KISS
# timeout 900 
# <kiss-subif 0>
#    callsign N0CALL-12
#    tx-ok    false
# </kiss-subif>
#</interface>
#
#<interface>
# tcp-device  12.34.56.78  4002  TNC2
# timeout 300
# <kiss-subif 0>
#    callsign N0CALL-12
#    tx-ok    false
# </kiss-subif>
#
#</interface>


# ***********  Multiple <netbeacon>  definitions follow   *********

<netbeacon>
# The  netbeacon  options.
#
# Parameter string (in quotes) is sent to APRSIS network (without quotes)
# at varying intervals --  1200-1800 seconds in between restransmits.
# This interval is intentionally randomized.
#
# Multiple netbeacons are evenly distributed for each time period,
# or at least 3 seconds apart.  First netbeacon is sent to network
# 30 seconds after connection to APRS-IS.
#
# There can be multiple netbeacon options.
# The parameter sets can vary:
#  a) 'for nnn-n dest "string" symbol "R&" lat "ddmm.mmN" lon "dddmm.mmE" [comment "any text"]
#  b) 'for nnn-n dest "string" raw "string"'
# The a) form flags on some of possible syntax errors in parameters.
# It will also create only "!" type messages.  The dest parameter
# defaults to "APRS", but can be used to give other destinations.
# The via parameter can be used to add other keywords, like "NOGATE".
#
# Writing correct RAW format beacon message is very hard,
# which is evidenced by the frequency of bad syntax texts
# people so often put there...   If you can not be persuaded
# not to do it, then at least VERIFY the beacon result on
# web service like  findu.com,  or  aprs.fi
#
# Symbol  R&   is for "Rx-only iGate"
#
#netbeacon for N0CALL-13 dest "APRS" symbol "R&" lat "6016.30N" lon "02506.36E" comment "aprx - an Rx-only iGate"
#netbeacon for N0CALL-14 dest "APRS" raw "!6016.30NR02506.36E&aprx - an Rx-only iGate"
#
</netbeacon>


# ***********  Multiple <rfbeacon>  definitions follow   *********

<rfbeacon>
#
#  RF-beacons are sent out to radio transmitters.   To all of them
#  that have "tx-ok true" setting if no "to" entry is defined, and
#  to defined one if the "to" entry is defined.
#
</rfbeacon>


# ***********  Multiple <digipeater>  definitions follow   *********

#<digipeater>
#
#  The digipeater definitions tell transmitters that receive
#  AX.25 packets from possibly multiple sources, and then what
#  to do on the AX.25 headers of those messages.
#
#</digipeater>

