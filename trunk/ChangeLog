2013-04-25 Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* filter.c:
	    Commented out code, but make it conform with API
	    of historydb.

	* parse_aprs.c:
	    The call parameter 'historydb' can be NULL,
	    don't SEGV on it.

	* telemetry.c:
	    Pointer writing to beyond end of buffer (one last time)

	* ttyreader.c:
	    hexdumpfp() text dump fix

	* beacon.c:
	    Restructured the beacon data preparation for transmit.
	    Lots of mistakes had crept in recently (2.06?)

	* interface.c, netax25.c:
	    Debug printouts of processing errors, and transmissions.

2013-04-23 Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* config.c:
	    Show 'myloc' lat/lon in degrees instead of radians.

	* digipeater.c:
	    debugging..

	* filter.c:
	    A fence-post error while parsing o/A8CDEF-12 -- accepted
	    only A8CDEF-1.

2013-04-22 Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.8.in, aprx-complex.conf.in, aprx.conf.in,
	  doc/aprx-manual.odt, doc/aprx-manual.pdf:
	    Change documentation wording around <beacon>.

	* config.c:
	    Fix myloc config parameter parsing.

	* beacon.c:
	    Every <beacon> group is now independent from each other.
	    If you define multiple <beacon> groups, they will be
	    running in parallel with their own scheduling.
	    Meaning that you can have different cycles, and defaults
	    at each.

	* all source files:
	    Change Copyright claim years to  2007-2013.

	* configure.in:
	    Auto-test for <netinet/sctp.h> header file.

2013-04-22 Geoffrey F4FXL <max@planetemax.com>

	* digipeater.c:
	    Recent rewrite of viafield tracking code forgot
	    to initialize it in many cases -- and Covarity
	    tool did not notice that :-(

2013-04-20 Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprsis.c:
	    Preparing for new communication modes

	* parse_aprs.c:
	    Two condition expression goofups that were always
	    "false"

	* filter.c:
	    Match filter parsing with aprsc (issue found with
	    Covarity testing)

	* aprsis.c, aprx.c, aprx.h, aprxpolls.c, cellmalloc.c,
	  config.c, digipeater.c, dprsgw.c, filter.c, interface.c,
	  kiss.c, netax25.c, telemetry.c, ttyreader.c:
	    Covarity testing revealed unclear error cases, unnecessary
	    comparisons against NULL, and other mostly harmless things.
	    There is still a memory leak in interface.c configuration
	    parsing in error path -- but that is not a big deal.

	* digipeater.c:
	    Modified "fixall" processing to put transmitter
	    callsign into first VIA field in every case,
	    possibly truncating the VIA list in order to make
	    room for the callsign in the incoming request.
	    Replacing numeric literals with #define constants
	    to inline document of what is going on at places.

2013-04-18 Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c, VERSION:
	    Version 2.07 (APRX27)

	* aprx.8.in:
	    Document "myloc" and "$myloc", "filter m/100", etc.

	* aprx.c, aprx.h:
	    Variables for myloc_lat, myloc_lon, and string forms.

	* config.c:
	    Parse "myloc lat xx long yy" entry.
	    Moved couple tool functions here from beacon.c.

	* filter.c:
	    Support "m/100", if top-level configuration has
	    "myloc lat xx lon yy" entry.

	* beacon.c:
	    new "macro" definition of "$myloc", which takes
	    lat+lon of top-level configuration "myloc.." entry.

	* interface.c:
	    Recognizing incoming messages targeted to this server
	    (by $mycall, and transmit interface callsigns.)
	    Processing them by rudimentary acknowledgement, and
	    optional place to actually process them.
	    Actual processing is still not written.

2013-02-02 Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* ttyreader.c:
	    Improve the error report, when serial port opening failed.

	* filter.c:
	    Coverity reports over aprsc reflect directly to aprx too.
	    We use same code in parts...

2012-12-29 Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* digipeater.c, aprx.h, historydb.h:
	    Track digipeated messages by source callsign.

	* aprsis.c:
	    Use A->rdlin_len  instead of strlen(A->rdline)

	* aprx-stat.c, aprx.c, aprx.h, erlang.c:
	    Moved syslog init from erlang to aprx core.

	* parse_aprs.c, aprx.h:
	    Function parse_aprs_message() for planned future use.

2012-12-09 Matt Maguire VK2RQ <matt.vk2rq@gmail.com>

	* telemetry.c:
	    Sometimes the Erlang registery contains interface
	    entries that are no longer actually in the system.
	    Avoid NULL referral at such situations.

2012-11-09 Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* dprsgw.c:
	    Better accounting on DPRS side-channel data occupancy,
	    assuming the DPRS gw does send bytes all the time.

2012-11-09 FUJIURA Toyonori JG2RZF <toyokun@gmail.com>

	* dprsgw.c:
	    Add receiver Erlang estimators to received packets.

2012-11-01  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprsis.c:
	    Move CRLF appending later into APRSIS transmission.

2012-10-31  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c:
	    Use thread-safe gmtime_r() instead of gmtime() for time printout.

2012-10-29  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* Makefile.in:
	    Improve distribution tar RPM building support.

	* rpm/aprx.init, rpm/aprx.service, rpm/aprx.spec.in:
	    RPM package packing files

	* filter.c:
	    Clean filter parser.

	* aprx.c:
	    Acquire a lock on pid-file, and keep the file open.

2012-10-29 FUJIURA Toyonori JG2RZF <toyokun@gmail.com>

	* dprsgw.c:
	    D-STAR callsign formatting for suffixless ones:
	      * "JG2RZF A" -> "JG2RZF-A"
	      * "JG2RZF  " -> "JG2RZF-"  Oops!

2012-10-12  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* rpm/aprx.spec.in, rpm/aprx.service:
	    Andrew Elwell <Andrew.Elwell@gmail.com>  supplied better
	    version of Fedora, and rhel.

	* filter.c:
	    Leave the "over-long parameters are rejected" logic, but don't
	    support alternate group field splitter input.

2012-10-03  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* TODO, INSTALL, aprx.c, aprx-manual.odt, aprx-manual.pdf,
	  VERSION: 2.06

2012-10-02  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* filter.c:
	    Parse filters with callsign sets without overflowing buffer.
	    Officially syntax is:   OP/callsign1/callsign2   but support
	    also:  OP/callsign1,callsign2

	* digipeater.c:
	    Correct analysis of first "via" field, bail out of the loop
	    only after it has been parsed.

2012-10-01  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* debian/postinst, debian/aprx.init:
	    Removed postinst from debian installations.  That script is
	    bad and causes install/upgrade to stall.  Modernized the
	    aprx init-script.

2012-09-30  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.h, digipeater.c, interface.c, pbuf.h, pbuf.c, parse_aprs.c:
	    Sync pbuf_new() implementation with aprsc's approach, and
	    sync parse_aprs() with aprsc's code.  This should fix some
	    strange MICe bugs, among others.

2012-09-18  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* parse_aprs.c:
	    Corrected MICe longitude degrees parser. Again.
	    (Sorry, F4FXL's parser fix was wrong.)

2012-09-05  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* apparmor.aprx, debian/rules, debian/dirs, debian/postint:
	    Copied bits of Aprsc's debian packaging to Aprx.
	    (Original packaging stuff was copied from Aprx to Aprsc.)

2012-09-02  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.8.in, aprx.conf.in, aprx-complex.conf.in, aprx-rxigate.conf.in,
	  configure.in:
	    Exterminated all instances of yours truly's own address from
	    the sample configurations, and replaced them with 0000.00N
	    00000.00E coordinate, which aprs.fi treats as invalid.

	* beacon.c:
	    In addition to the long time used qTYPE_LOCALGEN, added on
	    APRSIS beacons also  ",TCPIP*" at the tail of whatever is
	    being sent.  Pete is not happy with q-code alone...

2012-08-26  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* digipeater.c, interface.c, aprx.h, TODO, aprx-manual.*:
	    Add to APRSIS tx-gated packets optionally different via-path
	    (parameter: msg-path) for message packets, than for any other
	    type packets. For example:  via-path WIDE1-1,  msg-path WIDE2-2
	    (By request of OH3BK.)

	* VERSION:  2.05

	* beacon.c, interface.c:
	    Support beaconin to APRSIS without having any radio interfaces.
	    Make null-device interface and (in special conditions the internal
	    APRSIS interface) beaconable.

	* doc/aprx-manual.*:
	    Fixes on <beacon> explanations.
	    Diagrams on subsystem configuration examples describing message
	    flows.

2012-08-07  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* configure.in, aprsis.c, ROADMAP, doc/aprx-manual.odt:
	    Fix the "pthreads" typo by using correct "pthread" spelling
	    in the documents + "--with-pthreads" option alias in configure.

2012-08-07  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c:
	    Automatically create  igate-group N  values for radio interfaces
	    start from 1, and go onwards. Manually defined values start from
	    one, and it is up to the configuration writers to have a sane
	    upper limit.

	* aprx.c, aprx.h, ttyreader.c, erlang.c, kiss.c:
	    Fixed a) poll of KISS subinterfaces, b) KISS polling time
	    management issues.  The polling does not yet have serial-device
	    specific timing management, rather a global cadence.

	* aprx.c:
	    Version 2.05

	* ttyreader.c, aprxpolls.c, aprx.c, aprx.h:
	    Do millisecond timings, send KISS POLL (0x0E) code requests every
	    configured number of milliseconds per serial-device:
	       serial-device ... KISS pollmillis 100

	* agwpesocket.c, aprsis.c, aprx.c, aprx.h, aprxpolls.c, aprx-stat.c,
	  beacon.c, configure.in, digipeater.c, dprsgw.c, dupecheck.c,
	  erlang.c, filter.c, historydb.c, igate.c, interface.c, kiss.c,
	  netax25.c, netresolver.c, pbuf.c, telemetry.c, ttyreader.c:
	    Changed "now" from type "time_t" to "struct timeval" enabling
	    the ttyreader to do millisecond level timing operations.

2012-08-06  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* debian/aprx.init, rpm/aprx.init:
	    Correct the package start dependency definitions.

2012-08-04  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c, kiss.c:
	    Debug printout claimed reversed logical meaning in history-db
	    lookup. Typo fixes at kiss processing comments.

	* interface.c:
	    Config parser bug in defining multiple <kiss-subif ..>.
	    Thanks to N2PYI for report.

2012-07-31  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* configure.in, digipeater.c, aprx.h, valgrind.c:
	    Supply implementation of memrchr() if the platform does not have
	    it. (GNU Libc extension, not a standard POSIX thing.)

	* Makefile.in:
	    Fixing details around how to run "make make-deb".
	    Fixing how SVNVERSION is determined.

	* interface.c, igate.c, aprx.h:
	    rflog() parameter set modification, show directly at calls if
	    the logged item is 'R' or 'T'.

	* dupecheck.c, aprsis.c, igate.c, aprx.h, digipeater.c:
	    Prepare for the duplicate checker to be able to control the time
	    window of the duplicate checks - minimum will be 30 seconds, maximum
	    can be higher.

	* digipeater.c:
	    TNC2 format quirks in "VIA field" data caused missed identification
	    of "ping pong relay" - where a packet contains this node's
	    transmitter callsign, and this node has logged its address as
	    "sent through me".  Also known as TRACE mode:
	        SRC>DEST,MYTRANS,OTHERTX*,WIDE3-1

2012-07-30  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* keyhash.c, keyhash.h, netax25.c, netresolver.c, interface.c,
	  cellmalloc.c, config.c, dprsgw.c, ax25.c:
	    A compiler test with -Wall complained a bit around missing ANSI-C
	    prototypes.

2012-07-29  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* keyhash.c, filter.c:
	    Threw away the long unused CRC32 stuff, and added a hashkeyuc()
	    function.  Fixed the way how  filter_entrycall_*() and
	    filter_wx_*() functions processed the key. Now both of
	    them store keys as converted to upper case, and lookup
	    with mixed case.

	* aprx-config.xsd:
	    An attempt at writing a "formal" configuration file syntax
	    description.  It is really not XML that config file, nor
	    can XSD define it clearly, I think..

2012-07-28  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION: 2.04

	* filter.c:
	    Wrong way to put len* fields into an union vs. a few other things.

	* dupecheck.c, digipeater.c:
	    Fix from iw3ijq + k3pdk about AX25 duplicate tracking dropping null
	    pointers.  This has _not_ been validated for TNC mode frames yet,
	    but now AX.25 works properly.

2012-01-18  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION: 2.03test4

	* interface.c:
	    Record outbound "history heard" per interface.

	* historydb.c:
	    Simple refactoring to use same hash function all the time.

	* digipeater.c:
	    Feed all transmitted packets to dupe-filter of that transmitter.
	    This will handle cross-band digipeat + tx-gates so that
	    an APRS packet transmitted to a channel won't be digipeated
	    again by this transmitter.

	* igate.c:
	    When constructing APRSIS originated 3rd-party tx-igate
	    packets, use correct version of "TCPIP" in the header.

2012-01-07  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION:  2.03test3

	* pbuf.h, pbuf.c, aprx.h:
	    New infrastructure function: pbuf_fill() that does
	    former two (then 3) copies of same code in interface.c

	* interface.c:
	    Use new pbuf_fill().
	    On 3rd-party receiver, parse original (sort of) TNC2 frame
	    to temporary AX.25 frame for filter analysis.
	    Rearranged filter running and reactioning.

	* filter.c:
	    Debug printouts

	* All files...
	    Copyright text update.

2011-12-30  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c:
	    3rd-party igate tx processing fixes, now it allows also
	    other than messages

2011-12-25  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION, aprx.c, TODO, INSTALL, doc/aprx-manual.*:
	    Version 2.03

	* interface.c:
	    At top-level of the <interface> the "callsign" parameter
	    did not override device defined callsign and its AX.25
	    parse result.

	* aprx.h, config.c, dprsgw.c, logrotate.aprx.in,
	  aprx.conf.in, aprx-complex.conf.in:
	    Configurability of logging parameter "dprslog".

	* aprx.h, aprsis.c, beacon.c, igate.c, telemetry.c:
	    Supply qcode on outgoing packets depending it being
	    locally generated (qAS) or rx-i-gated (qAR)

	* telemetry.c:
	    Fix telemetry "tocall" to use software identifier,
	    and to put "TCPIP*" on APRSIS beacon path.

	* aprx.conf.in:
	    Fix default server list

	* crc.c, kiss.c:
	    Document polynomes and fix comments

2011-08-29  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* parse_aprs.c:
	    F4FXL found bug in position parser cos() pre-calculator.
	    Input needs to be in radians, it was in degrees.

2011-07-26  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c:
	    If preceding address processing detects an error, do not call
	    packet transmitter.

	* aprx.h, dprsgw.c, parse_aprs.c:
	    Moved DPRS related APRS symbol translation from parse_aprs.c
	    to dprsgw.c.

	* parse_aprs.c:
	    Introduced APRS symbol mapper/generator for GPS messages.

	* parse_aprs.c:
	    Rewrite of parse_aprs_mice() degrees parser inspired by F4FXL.

2011-03-16  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* beacon.c, telemetry.c, aprx.h, interface.c:
	    Transmit only radio data port related beacons,
	    and telemetry. Don't touch on other pseudo-interfaces.

2011-01-02  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c, agwpesocket.c, aprx.h:
	    Configure <interface> agwpe-device.

	* netresolv.c:
	    Oops..  fixed functionality. Tuned debugging.

	* aprsis.c, aprx.c:
	    Tuned debugging.

	* configure.in, aprsis.c:
	    Autoconfig stdarg.h existence, use varargs on debug printout code.

	* agwpesocket.c:
	    Debug printout on received frame.

	* interface.c, doc/aprx-manual.odt:
	    Unlimit the number of "igate-group N" parameter's N value range.

	* aprsis.c, aprx.c, beacon.c, config.c, digipeater.c, dprsgw.c,
	  filter.c, historydb.c, igate.c, interface.c, keyhash.c, kiss.c,
	  netresolver.c, ttyreader.c:
	    Cleaning compiling on a very old FreeBSD -- essentially K&R C
	    compiler (gcc 2.95.4) not permitting variable declarations
	    anywhere but beginning of code block.

2011-01-01  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c:
	    Always init interface specific Erlang accounting

	* filter.c:
	    Negative ranges on filters means "outside the distance".
	    This allows adding "substractive" filters that tell
	    "don't pass messages to receipients outside given range".

	* configure.in, interface.c, cellmalloc.c, timestamp.c,
	  kiss.c, historydb.h, netax25.c, pbuf.h, aprx.c, aprx.h,
	  filter.c:
	    Clean autoconfig tests, make the code compilable on oldish
	    FreeBSD.

	* configure.in, aprx.h, aprx.c, agwpesocket.c, interface.c:
	    Configuration option --enable-agwpe  to enable AGWPE socket
	    interface code.

	* configure.in, aprx.h, aprx.c, aprsis.c, ax25.c, beacon.c,
	  digipeater.c, dpwsgw.c, erlang.c, filter.c, historydb.c,
	  igate.c, interface.c, parse_aprs.c, telemetry.c, ttyreader.c:
	    Configuration option  --disable-igate   for embedding
	    code without igate network connection. Disables DPRS GW code,
	    and all of historydb, igate.c, aprsis.c.

	* aprx.c, VERSION, INSTALL, README, TODO
	    Version: 2.02

	* aprx.h, interface.c:
	    A  null-device   for sinking infinite digipeat output.
	    A debug tool.

	* aprx.h, interface.c, historydb.c, historydb.h, pbuf.h:
	    Properly track "heard from interface(group)" information
	    for tx-igate processing.  Now a full APRSIS traffic feed
	    won't transmit anything to RF, unless explicit manual
	    filter definitions tells to transmit, or message recipient
	    has been recently heard behind a radio channel X.
	    See the new 'igate-group'  parameter on documents.

	* aprsis.c, netresolver.c:
	    Cleaned pthreads thread creation calls.

	* agwpesocket.c:
	    Erlang account on outbound socket.

	* digipeater.c:
	    Allow ratelimit parameter to be defined very high.
	    This way a full APRSIS traffic feed can be sent to null-device.

	* aprx.conf.in, aprx-complex.conf.in:
	    Some new notes on digipeater and tx-igate controls.

	* doc/aprx-manual.odt:
	    Document update.

2010-12-18  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c, aprx.h:
	    Add a "null-device" for system.  Never receive anything from it,
	    have infinite transmit capacity.

	* netresolver.c, aprx.h, aprx.c:
	    A pthread that resolves dynamic DNS names on background,
	    and updates static copy of address data so that main loop
	    can safely do asynchronous connections without needing
	    to do synchronous DNS resolving processing.

	* aprsis.c:
	    Use pthread_cancel() in smart way to expedite shutdown.

	* agwpesocket.c, aprx.h, aprx.c:
	    Draft of a socket communication mechanism with AGWPE, and LDSPED.

2010-12-17  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION, INSTALL, README, TODO
	    Version: 2.01

	* doc/aprx-manual.odt:
	    Write a few pages about debugging

	* aprx.c:
	    Version tocall code: APRX21

	* aprx.c, aprx.8.in:
	    Add '-i' option to keep the program foreground without
	    enabling any debug printouts.

	* digipeater.c:
	    Correct the recognition of "probably heard on first hop"

	* historydb.c:
	    Memory realloc() bug fixed.

	* kiss.c:
	    Recognize a write attempt on closed file handle, don't write.

2010-08-08  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION:  2.00
	* aprx.c:   Version tocall code: APRX20
	* doc/aprx-manual.odt: version 2.00/1.00

2010-08-02  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c:
	    Version tocall code: APRX1M

	* ROADMAP:
	    Planning update.

	* beacon.c, aprx.8.in, aprx.conf.in, aprx-complex.conf.in:
	    OH7MMT complained difficulty of defining beacons on Rx-iGate.
	    The default aprx.conf shows the use of "interface ..", which
	    requires tx-enabled target interfaces.  Something that rx-only
	    will not have.

	* doc/aprx-manual.odt:
	    Cross references, additional notes on digipeat of non-APRS
	    packets.

2010-07-27  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* config.c:
	    Accept valid APRSIS login callsigns for "mycall" parameter
	    value.  Will complain latter if end usage did want valid AX.25
	    callsigns instead.

2010-06-25  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c:
	    Account the number of created interfaces and subinterfaces,
	    and if there is just one and no callsign has been defined,
	    only then supply a default value ("callsign $mycall").

	* interface.c:
	    Check interface callsigns to be unique.

	* aprsis.c, beacon.c, digipeater.c, interface.c, telemetry.c:
	    Recognize "$mycall" in case insensitive matching.

2010-06-22  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c:
	    Version tocall code: APRX1L

	* digipeater.c:
	    If there is a viscous-delay defined, add a random value of 0..2
	    to the configured number of seconds delay.
	    This way similarly configured adjacent Tx-iGates can at random
	    find a first transmitter and others will drop the Tx-iGate.

	* digipeater.c:
	    Digipeater didn't detect interface callsigns and aliases properly,
	    when determining if there is some work to be done.  It did detect
	    them when to avoid doing duplicate work.

2010-06-19  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c, aprx.h, aprsis.c, beacon.c, config.c, digipeater.c,
	  interface.c, telemetry.c, ttyreader.c:
	    Improve config file parsing error reporting.
	    Any ERROR observed on configuration parsing causes immediate
	    abort with exit-code 1.

	* aprx.conf.in, aprx-complex.conf.in, aprx.8.in:
	    Clarify the documentation at man-page, and at config templates.

	* firmware/*
	    Copied one source of TNC2 firmwares

	* windows/*
	    Just a placeholder.

	* Makefile.in:
	    Improving "make dist" behaviour.

2010-06-13  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.8.in, doc/aprx-manual.odt:
	    Some notes on available baud-rates, fixes on
	    documentation about CRC algorithms.

	* ttyreader.c:
	    Missed baud speed 57600.

	* dupecheck.c:
	    Shrink the arena allocation size to 4 kB.  This allows
	    14 reference packets in the dupecheck dataset within that
	    arena alone, and will possibly request second arena when
	    this get really busy.

	* historydb.c, dupecheck.c, pbuf.c, filter.c:
	    Made cell object sizes readable with a debugger

	* crc.c:
	    Object visibility adjustments.

	* Makefile.in, crc.c, aprx.h, kiss.c, ttyreader.c, interface.c:
	    Separated KISS processing to kiss.c, and CRC processing
	    to crc.c.  Disabled unused codes.

	* pbuf.c, historydb.c, dupecheck.c:
	    Shrink RAM usage, cellmalloc() does perfectly good job
	    of using free-chains, no need to do it in applications.

	* interface.c, pbuf.c:
	    The pbuf_new() has a limit on maximum total size that
	    a packet can be: 2150 bytes.  If ax25len + tnc2len are
	    more than that, pbuf_new() returns NULL.

	* historydb.c, historydb.h:
	    Instead of historydb instance specific history entry pools,
	    have one global pool.

2010-06-12  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* cellmalloc.c:
	    Remove pthread_mutex_t usage, not needed in this application!
	    Conditionalize debugging code.

	* pbuf.c, aprx.c, aprx.h:
	    Using cellmalloc() on pbuf storage. Support up to 2150 byte
	    received AX.25 frames. (Up to 7 pbufs of that size on 16 kB
	    cell arena .. and there never should be larger than around
	    512 byte AX.25 frames.)

	* dupecheck.c:
	    Shrink dupecheck to 16 kB per alloc arena (from 256 KB).
	    That should be enough for a very busy 1200 bps channel,
	    and probably even for a 9600 bps channel.

	* filter.c:
	    Shrink filter cell storage to 4 kB per alloc arena (from 512 kB!)

	* historydb.c:
	    Shrink historydb cell storage to 32 kB per alloc arena (from 128 kB)

	* debian/aprx.init:
	    Pleasing init-script behaviour during package re-install

	* telemetry.c, doc/aprx-manual.odt:
	    Stagger telemetry transmissions a bit.
	    All RF reported telemetry sources are reported at the same time,
	    but telemetry data is time-wise separated from labels, and labels
	    are sent so that 3 different labels are sent every 2 hours, and
	    total label carouselle time is 6 hours.

	* aprx.c:
	    Giving this version code: APRX1K

	* telemetry.c:
	    Correct AX.25 data frame for RF transmission

	* telemetry.c, config.c, aprx.h, doc/aprx-manual.odt,
	  aprx.conf.in, aprx-complex.conf.in:
	    New <telemetry> config section, be able to tx
	    telemetry to RF ports.

	* beacon.c:
	    Error reporting additions.

	* erlang.c, aprx-stat.c, aprx.h, telemetry.c:
	    Use pre-processor conditionals to select only small
	    subset of storage and processing codes used for
	    erlang data in embedded mode.

	* parse_aprs.c:
	    Compile warning silencing.

2010-06-10  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* kiss.c, ttyreader.c, dprsgw.c, aprx.h:
	    Tracked specification origins of each of the three
	    different CRC-16 calculations that this code has.
	    What was called "crc_ccitt" was in fact something
	    totally different: the SMACK CRC16.

2010-06-07  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* README, ROADMAP, TODO, INSTALL, PROTOCOLS:
	    Updates on plans and rough guides.

	* TIMESTAMP-AT-APRSIS, timestamp.c:
	    A proposal to put about 1ms resolution timestamps
	    on APRSIS with full backwards compatibility.

	* aprx.c:
	    Giving this version code: APRX1J

	* dprsgw.c, digipeater.c, aprx.h, doc/aprx-manual.odt:
	    Clean DPRS Rx gateway code.

	* interface.c:
	    Correct 3rd-party packet gating filter behaviour:
	    If there are _no_ filters, pass all packets thru.

	* interface.c, aprx.h, dprsgw.c, igate.c:
	    Rate-limit source callsigns per source interface to
	    once per 30 seconds.  RF iGate DPRS messages to APRS
	    as 3rd-party messages.

2010-06-06  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* parse_aprs.c, dprsgw.c:
	    Rudimentary GPSxyz -> APRS symbol mapping for DPRS,
	    with GPSxyz overlay character where possible.
	    Also IDENT TEXT, if any.

	* debian/aprx.init:
	    The "restart" command fails to work quite often.
	    The reason being "set -e"...

	* aprx.h, igate.c, dprsgw.c, ttyreader.c, ax25.c:
	    igate_to_aprsis(... , STRICTAX25)  -- new flag
	    to control source specific information about
	    TNC2 format address formats.

	* parse_aprs.c:
	    Remove unnecessary double precission floating point math.
	    Use of 'float' is quite enough.

	* debian/control:
	    Change package name a bit

	* dprsgw.c:
	    Data collection code fixes

	* telemetry.c:
	    Send first telemetry at 20.0 minutes after start.
	    This is related to defaulting to EMBEDDED operation mode.

	* configure.in, aprx.h, erlang.c:
	    Change defaults so that System is always "--with-embedded",
	    and requires explicit "--with-erlangstorage" to compile with
	    a filesystem based backing storage codes.

2010-06-04  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.h, dprsgw.c:
	    Couple steps onwards with DPRS Rx-IGate.

2010-06-01  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c:
	    Set software tocall to 'APRX1H'.

	* interface.c:
	    Found a memory leak on AX.25 type packet receiver. Oops!
	    Ax.25 packets that were rejected by <digipeater> <source>'s
	    filters were just leaked, not disposed.

	* historydb.c:
	    Allocate cell arenas in 128 kB blocks.

	* digipeater.c:
	    Valgrind complained about uninitialized variables.
	    Default zero is not good enough...

2010-05-30  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.h, digipeater.c:
	    Use 'float' for ratelimit variables.  Permitting as low
	    rate definitions as 'once per 10 minutes.

	* dprsgw.c:
	    XOR checksums of "GPS" mode packets.  No Rx-iGate of them yet.

2010-05-29  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* dprsgw.c, ttyreader.c, aprx.c, aprx.h:
	    Experimental DPRS receiver. Studying packet identification
	    from serial port datastream with Rx-IGate of GPS-A type DPRS
	    packets.

	* interface.c, doc/aprx-manual.odt:
	    Effects of 'filter ...'  on different <digipeater>
	    <source> sections are subtly different. See the manual!

	* aprx.h, digipeater.c, doc/aprx-manual.odt, aprx.conf.in,
	  aprx-complex.conf.in:
	    Remodelled the ratelimiting to use 'token bucket filter':
	       ratelimit average burst
	    both values are packets per minute, and both default to 60.

	* digipeater.c, interface.c:
	    Return adjunk filters to RF->RF digipeating.
	    They got lost a bit back with Tx-IGate needing
	    them placed a bit differently.

	* man-to-html.sh:
	    groff has changed its -Tascii output a bit, and
	    its own HTML output is horrible...

2010-05-27  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* parse_aprs.c:
	    Correct parse of message recipients.
	    Fix from Patrick Domack K3PDK.

2010-05-26  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* debian/rules, rpm/aprx.spec.in, aprsis.c:
	    Fixes on pthread:ed aprsis implementation.
	    Default packaging for Debian and RPM to use --with-pthread.
	    Now it shows only one "process", and two threads.
	    This makes the program portable to uCLinux, and possibly
	    to Windows.

	* dprsgw.c, aprx.h, ttyreader.c, Makefile.in, interface.c,
	  aprx.8.in, aprx.conf.in, aprx-complex.conf.in:
	    Add basic configuration and infra of DPRS-to-APRS gw.

	* interface.c, igate.c:
	    Comment editing, adding Tx-IGate Rule 4, second half.
	    First half probably exists in igate..

2010-05-25  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c, README, TODO, VERSION:
	    Mark version 1.99, APRX1G

2010-05-25  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c, filter.c:
	    Filtering logic change on 3rd-party digipeating.

2010-05-24  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c, TODO:
	    Notes about missing bits for full Tx-IGate.

	* historydb.c, historydb.h:
	    Keep knowledge of last coordinate on historydb.
	    Mark also last coordinate update time.

	* aprx.h, pbuf.h, parse_aprs.c, interface.c, digipeater.c:
	    Tx-IGate processing details..

2010-05-23  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c, aprx.h, digipeater.c, filter.c, historydb.c, historydb.h,
	  igate.c, interface.c, parse_aprs.c:
	    Rearranged bits so that Tx-IGate's processing has transmitter
	    specific history database.   Better (but yet a bit incomplete)
	    Tx-IGate filtering is in interface.c.

	* kiss.c, aprx.8.in, aprx.conf.in, aprx-complex.conf.in,
	  netax25.c, aprx.h, ttyreader.c:
	    Add FLEXNET support.  (Finnish HamDR speaks it by default!)

	* interface.c:
	    Corrections on <kiss-subif> definitions, in particular
	    the aliases.
	    Fixed Tx-IGate workhorse interface_receive_3rdparty()'s
	    packet address header construction.

	* digipeater.c, aprx.h:
	    APRSIS specific via-path parameter parsing fixes, additional
	    debugging outputs, config error detection outputs.

	* netax25.c, ax25.c:
	    Debugging outputs.

	* ttyreader.c, aprx.h:
	    Debugging outputs.
	    Special KISS subtype "RFCRC" - received KISS frames have
	    two RANDOM bytes at their end. Looks like CRC16, but is
	    random junk.

	* erlang.c:
	    Debug printout.

	* beacon.c:
	    When an interface has no callsign, do not send beacon to it.
	    (It could be tty master interface which has multiple KISS
	     sub-interfaces.)

	* igate.c:
	    Parse packet to be tx-igated for acceptable address syntaxes.
	    Debug printouts.

2010-05-16  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprsis.c, aprx.conf.in, aprx.8.in, doc/aprx-manual.odt:
	    Emphasize that <aprsis>'s login parameter is to be
	    set ONLY when it needs to be different than mycall
	    value.  (But tolerate also '$mycall' alias.)

	* aprx.c:
	    Update internal tocall default to 'APRX1F'.

	* interface.c, digipeater.c:
	    Tx-iGate fixes for case where outgoing packet has no
	    VIA field(s).  System saw that "requested hops = 0,
	    done hops = 0 -> no need to send out".

	* parse_aprs.c:
	    Make sure that all things creating debug output are
	    followed by a "\n".

	* igate.c:
	    Relax station callsign format rules inside a received
	    3rd-party frame.

2010-05-13  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c:
	    Under all situations, fill in pbuf_t->dstcall_end.

	* debian/rules:
	    Do not strip resulting objects. We want debug symbols!

	* digipeater.c:
	    Improve config error reporting.

	* config.c:
	    Tolerate config file ending without a newline.

2009-12-27  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c, VERSION: 1.98

	* rpm/aprx.spec,  debian/docs, debian/control:
	    More documents into the packages

	* beacon.c, aprx.8.in, aprx.conf.in, aprx-complex.conf.in,
	  doc/aprx-manual.odt, doc/aprx-manual.pdf:
	    Changes on beacon definition keywords to make them clearer
	    for a user.  Old forms continue as silently accepted aliases.

2009-12-27  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION: 1.97

	* beacon.c, aprx.8.in, aprx.conf.in, aprx-complex.conf.in:
	    Never send to APRSIS interface.
	    Define 'object' and 'item' type named entities.
	    Uppercasify several of input fields.

	* interface.c, digipeater.c, aprx.h:
	    On tx-igate behaviour, add configured via-path on outgoing
	    3rd-party frames

2009-12-16  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* beacon.c:
	    Reworked more..  beacons were sent only for "tx-ok true"
	    interfaces, while netbeacons are to be sent for all interfaces.

2009-12-03  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* beacon.c:
	    Reworked things a bit, on how and with what content to
	    send beacons.

	* netax25.c:
	    Valgrind pleasing

	* telemetry.c, ttyreader.c, beacon.c, netax25.c, aprx.h:
	    Debug printouts.

2009-12-01  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c:
	    Register tty KISS subinterface 0 only once.

	* beacon.c:
	    When a file-beacon is defined, the message content is
	    no longer at  bm->msg, instead at local variable msg.

	* netax25.c, aprsis.c:
	    Pleasing valgrind.

2009-11-26  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* parse_aprs.c:
	    Sometimes ran memchr() with bad length. Caused rare crash.

	* digipeater.c, aprxpolls.c, netax25.c, aprsis.c, aprx.c, aprx.h:
	    Valgrind tested minor changes.

2009-11-17  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.8.in:
	    Big rewrite.

	* aprx.h, interface.c, digipeater.c, netax25.c:
	    Digipeater "relay-type directonly"  mode.
	    Interface parsing error detection improvement.

2009-11-08  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION 1.96

	* beacon.c, aprx.8.in, aprx.conf.in, aprx-complex.conf.in:
	    Rewrote beacon transmission interval codes, and documents
	    of the beacon system.

	* configure.in, Makefile.in:
	    Added  --with-pthread   option,  rewrote the  --with-embedded
	    option processing.

	* aprsis.c, configure.in:
	    Optionally support pthreads(3) where available, this can be
	    important for uCLinux and perhaps Windows, where fork(2) is
	    not available.

2009-11-07  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c:
	    Software tocall identity: APRX1C

	* cellmalloc.c:
	    Drop semaphores.  Not used in this codebase.

	* filter.c, aprx.h, parse_aprs.c, Makefile.in:
	    Port Aprsc's filter code to Aprx.

	* debian/aprx.init, rpm/aprx.init:
	    Update Debian's version, sync the rpm's version

	* telemetry.c:
	    Report every 20 minutes, but scale values telling 10 minute
	    traffic.  Start sending telemetry PARM blocks from system
	    start.

	* aprx.c:
	    Init configurations before starting erlang accounting subsystem.

2009-11-02  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION 1.95

	* aprx.c:
	    Software tocall identity: APRX1B

	* telemetry.c:
	    Erlang reporting confusion fixed.

2009-10-30  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c:
	    More logging of interface setups.

	* beacon.c, aprx.8.in, aprx.conf.in, aprx-complex.conf.in
	    New type of beacon:  file  /path/to/file,  the first line
	    in given file is read every time this beacon entry is
	    executed, and the text is sent out sans line end LF.
	    There are no quote processing available.
	.
	    Validate latitude and longitude input, and complain if
	    validate failed.
	.
	    Beacon timefixing on all message types that support it,
	    and only upon special "timefix" option set on the beacon.
	.
	    Beacon construction from small parts supports 6 different
	    fundamental packet types with coordinates.

	* config.c:
	    Make config parser debugging needs  -ddd  runtime options.

	* telemetry.c:
	    Report higher of 10 minute integrated packet/byte counts in
	    the 20 minute account interval.  This makes graphs smoother.

2009-10-27  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.h, aprx.c, aprsis.c, beacon.c, netax25.c, ttyreader.c,
	  erlang.c, aprx-stat.c, igate.c:
	    Modify the printtime() to print millisecond resolution times.

2009-10-26  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* beacon.c, config.c, aprx.h, aprx.conf.in, aprx-complex.conf.in,
	  aprx.8.in:
	    Added a 'beaconmode { aprsis | both | radio }' config option,
	    which says where the beacons are sent to.

	* ROADMAP
	    Development roadmap for first digit of version number

2009-10-25  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* digipeater.c, beacon.c, interface.c, aprx.h:
	    Put all beacons on digipeater's transmitter duplicate checker
	    storage.  Now a beacon with WIDE2-2 path will not be repeated
	    by message originator.  Re-organized beacon's code base.

	* netax25.c, interface.c, aprx.h:
	    Use Link-Level mechanism to send arbitrary AX.25 packets to
	    desired devices.  Added also a about once minute run code
	    that checks current AX.25 devices in the system, and maps
	    necessary ifindex:es to netdevices wanting to do IO.
	    And all parameters to 'netax25_sendto()' are const..

	* aprx.h, aprx.c, aprx-stat.c, aprsis.c, erlang.c, igate.c:
	    Commonly used strftime() got put into  printtime() function.

	* VERSION 1.94

	* interface.c:
	    That final part of <interface> thing (below) can only
	    be done, if this interface has non-null tty field.

	* Makefile.in
	    "make valgrind" - helps debugging some screwups..

	* digipeater.c:
	    Stop scanning the viscous queue, once time limit exceeds
	    current time.

	* aprxpolls.c:
	    A screwup on allocations found with valgrind.  Oops!

	* netax25.c, aprsis.c, dupecheck.c, ttyreader.c, erlang.c,
	  aprx.c, aprx.h, ax25.c, beacon.c, igate.c, historydb.c,
	  valgrind.c, Makefile.in:
	    Code changes to clean valgrind outputs on nuisance messages.
	    And at least one bugfix for valgrind environment...

2009-10-24  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* telemetry.c:
	    Changed telemetry channel 2:  Erlangs from bytes_tx accounting.
	    Now there is separate channel load graph showing how much this
	    transmitter is affecting the channel.
	    Give also better label for channel 4: IGateDropRx

	* rfbeacon.c -> beacon.c, aprx.h, aprx.c, config.c, Makefile.in:
	    Rename  rfbeacon.c  to  beacon.c.

	* interface.c:
	    As a final part of <interface> definition, check if
	    the default tnc-subid (0) has associated ttycallsign
	    defined, and netax25 pty not enabled.  If so, create it.

	* parse_aprs.c, interface.c, aprx.h:
	    Depending upon usage, either do not look inside 3rd-party
	    frame, or do look inside.   For Tx-iGate call paths we need
	    the analysis!

	* parse_aprs.c, interface.c, historydb.c, digipeater.c,
	  rfbeacon.c, dupecheck.c, igate.c:
	    Removed codes ignoring "trailing CRLF in APRS frame tail".
	    They kept causing more trouble than good.  The parse_aprs.c
	    is anyway diverged from its origins a bit more than I would
	    like, so no need to maintain mess related on its original
	    environment.

	* dupecheck.c, aprx.h:
	    Adjust dupecheck hash bucket size - 16 is quite sufficient
	    enough even for a very busy igate/digi!

	* igate.c, aprx.h, ax25.c, ttyreader.c
	    Restructured 3rd-party frame rx-igate processing so that it
	    does not need to alter TNC2 format buffer in any way.
	    This caused some weird things to happen in digipeater on cases
	    of 3rd-party frames.
	    Also modified ax25-to-tnc2 UI-formatter so that there will
	    always be zero termination of output text string.

	* interface.c, digipeater.c:
	    Small restructuring while debugging other things.

	* parse_aprs.c:
	    Parse APRS 3rd-party frame content, and recognize real
	    3rd-party frame for sure.

2009-10-24  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION: 1.93

	* ttyreader.c, erlang.c:
	    Feeding in generated random noise did raise a few errors
	    in KISS frame processing, and erlang accounting.
	    KISS tncid:s sometimes did not have a callsign associated
	    with them, and then erlang accounting blew up...

	* interface.c, rfbeacon.c, ax25.c, aprx.h:
	    Beacons to radio interfaces, KISS works best, NET-AX.25 less
	    well -- transmits OK UI frames, transmit of arbitrary other
	    types of frames is necessary for generic digipeating.

	* digipeater.c:
	    Add alias to config parameter 'transmit' -> 'transmitter'.

	* netax25.c, config.c:
	    Removed unused parameter on  netax25_addrxport().
	    Rebuilt netax25_sendto(), however it sends out only UI frames..
	    Removed pre-created tx_socket, and associated codes.

	* configure.in:
	    Remove unused autoconf test for  cfmakeraw()..

2009-10-23  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* rfbeacon.c:
	    Fix the debug printout of beacon to be sent.

	* aprx.h, config.c: readconfigline()
	    Keep the cf->linenum showing first source line number on
	    continued multiline.  This helps a bit on debugging, and
	    similar things are already done when a (sub)group parser
	    is reporting where that subgroup begins in case of missing
	    parameters in a group.

	* digipeater.c:
	    Validating received requests better. Now marking also probable
	    situations that can say "this came from originator to me directly"

	* netbeacon.c, rfbeacon.c, config.c, aprx.h, aprx.c, aprsis.c,
	  Makefile.in:
	    Removing the old netbeacon code.

2009-10-22  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.h, rfbeacon.c, interface.c:
	    Implemented new infra for sending APRS beacons to radio
	    interfaces.  Incoming request will at first construct
	    the AX.25 header, then send that to physical interfaces.

	* aprx.h, ax25.c, digipeater.c, interface.c, kiss.c, pbuf.h,
	  pbuf.c, netax25.c, parse_aprs.c, rfbeacon.c, ttyreader.c:
	    Changed all instances of 'unsigned char' to 'uint8_t'.

2009-10-21  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* config.c:
	    Clean away some superflous debugs.

	* digipeater.c:
	    Viscous mode debug printout crashes on SEGV.. Oops.
	    (without debug the bug does not hit.)

	* README.ViscousDigipeater, digipeater.c:
	    Thinking about what are correct rules on Viscous Digipeat.

	* digipeater.c:
	    On configuration, make sure that no two <source> definitions
	    within single <digipeater> definition have same <interface>:s.

2009-10-20  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.h, digipeater.c:
	    Viscous digipeater special corner cases..

	* aprx.h, config.c, aprx.conf.in, aprx-complex.conf.in
	    Interval parser for "timeout" and "interval" parameters
	    used in several places.

	* config.c, aprx.conf.in, aprx-complex.conf.in:
	    Line continuation (the '\' character at the end of
	    input line - with possible whitespaces following it)
	    is now supported.
	    An interval parser is added; timeouts and intervals
	    can be defined in human readable way:  3m2s

	* aprx.8.in:
	    Larger rewrite to bring it up to current version.

	* aprsis.c, aprx.conf.in, aprx-complex.conf.in:
	    Reworked details of <aprsis> configuring, and internal
	    operational semantics.  Most notable difference is on
	    possibility to define used filters in small fragments,
	    which the system will then catenate.

	* aprx.h, digipeater.c, dupecheck.c:
	    Returned the viscous delay processing back to version
	    just before "simplified viscous delay and dupechecking".
	    It really needs to check delayed vs. immediate counts.

2009-10-19  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION: 1.92

	* digipeater.c, interface.c:
	    Clean variable naming on digipeater <source> subsystem.

	* aprx.h, aprx.conf.in, aprx-complex.conf.in, igate.c:
	    Update documentation

	* igate.c:
	    Reject packets with destcall=RXTLM-* from Tx-IGate.

	* digipeater.c:
	    Simplify control flow when feeding to viscous queue vs.
	    when running the backend directly.

	* aprx.h, digipeater.c, dupecheck.c, igate.c:
	    - Fixed 3rd party dupechecking
	    - Simplified viscous delay and dupechecking.
	      The dupechecking happens at the start of digipeater_backend(),
	      which is called after pbuf's have been subjected to a viscous
	      delay, if ever necessary.  First arriving packet is digipeated,
	      if it has steps to do. If not, rest are still considered dupes,
	      and not digipeated.

	* aprx.h, igate.c:
	    Make rflog() public function to be used by multiple parties.
	    Also mark on the log line the direction to which the packet
	    was going (R/T), and not only its source interface.

	* ax25.c:
	    Moved igate_to_aprsis() call before interface_receive_ax25(),
	    and thus also log received packet on rf.log before it is sent
	    out anywhere.

	* aprx.h, interface.c, digipeater.c, aprx.8.in, aprx.conf.in,
	  aprx-complex.conf.in, dupecheck.c:
	    Moved viscous-delay processor into digipeater's <source>
	    control area.  Implemented Tx-IGate's packet re-formatting
	    rules on interface.c.  Implemented viscous-delay processing
	    in digipeater. Added refcounting on dupe_record_t objects.

	* digipeater.c, igate.c, config.c, aprx.h, aprx-complex.conf.in:
	    Moved regexp reject filters from old style setup at igate.c
	    to new style at digipeater.c.  This will not be able to reject
	    trivially configurable things from Rx-IGate datastreams, but
	    it can be used to control digipeating.

	* ax25.c:
	    Remove unnecessary debug printout.

2009-10-18  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION: 1.91

	* aprx.h, dupecheck.c, digipeater.c, pbuf.c, pbuf.h, aprsis.c,
	  igate.c, keyhash.c:
	    Digipeater local instance of dupechecker.  The dupe-checker
	    does recursive analysis of APRS packets for 3rd party
	    frames, and dupecheck the innermost frame of them.
	    Cleaned the keyhash.c to contain only FVN-1a hasher.

	* digipeater.c, interface.c, telemetry.c, aprx.h, ttyreader.c,
	  erlang.c, aprx-stat.c:
	    Start transmitting digipeated frames to ttyreader's KISS
	    output.  netax25's similar interface is not tested.
	    Changed also the Erlang dataset format, and begun to
	    produce Tx packet counts on telemetry.  Accounting
	    saves also tx byte counts, but they are not reported.

	* aprx.h, interface.c, digipeater.c, pbuf.h, pbuf.c, ax25.c:
	    Pass the UI PID information all the way to interface,
	    where it can be matched against a list of PIDs that will
	    be treated alike APRS in digipeating.
	    Have two modes in digipeating: one with interface (and
	    aliases) as recognized work targets, and other with APRS
	    wide/trace tags in addition to interface (and aliases).

	* aprx.h, ax25.c, interface.c, digipeater.c, aprx.conf.in,
	  aprx-complex.conf.in:
	    - Prefill AX.25 address field formatted ax25callsign
	      field on all <interface> datastructures.  That comes
	      handy when doing TRACE processing.
	    - Put exact "callsigns" of "WIDE", "TRACE", and "RELAY"
	      into system as interface callsign aliases. When they
	      are present in the request path, substitute interface
	      callsign there with H-bit set.
	    - Update aprx.conf samples to how the system can be
	      configured.

2009-10-17  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.h, digipeater.c, interface.c, pbuf.h, parse_aprs.c:
	    Digipeater preparation, system counts done and requested
	    distribution operations with source specific as well as
	    transmitter specific keywords.

	* aprx.h, ax25.c, interface.c, aprsis.c, pbuf.c, parse_aprs.c:
	    Changed a few "parse failed" returns to "parse OK".
	    Systematic feed of datapacket "with TNC2 line end CRLF pair".

2009-10-16  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* erlang.c, aprx.h, ttyreader.c, netax25.c, igate.c:
	    Clean Erlang accountig API.  Removed unused parameters.

	* interface.c, aprsis.c, igate.c, aprx.h, aprx.c, digipeater.c:
	    Minimal <digipeater> <source> definition parsers.
	    Additionally internal "APRSIS" pseudo-interface.

2009-10-15  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.h, aprx.c, rfbeacon.c:
	    Add internal "tocall" constant with value "APRX19".
	    That one will track software versions.
	    The 'for' keyword on beacons defaults to $mycall.

	* aprx.h, aprx.c, interface.c, config.c, rfbeacon.c, aprsis.c,
	  ttyreader.c, netbeacon.c:
	    Config machinery redone towards new style.  Rx-IGate
	    works again.  (Old config should work too.)

	* aprx.h, pbuf.c, pbuf.h, interface.c, digipeater.c, aprx.c:
	    Skeletons for pbufs, digipeaters, and their uses in
	    the interface layer.

	* aprsdigi.c, ax25.c, Makefile.in:
	    Remove obsolete placeholder.  Things will be done differently.

	* config.c, rfbeacon.c:
	    The rfbeacon code will be doing all variants of beacons..

	* interface.c, netax25.c, ttyreader.c, aprx.h, ax25.c:
	    interface_transmit_ax25() is able to transmit a fully formed
	    AX.25 header+control+body frame to Linux internal AX.25 network
	    devices as well as to any serial port attached KISS device.
	    Transmission to TNC2 devices is not supported.
	    Code is also very careful on checking the AX.25 frame header
	    structure, and rejecting outright any with invalid header
	    structure (bad continuation flags, bad chars in callsigns,
	    not so careful with SSID byte contents - too many are careless
	    with those :-( )

2009-10-14  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* rfbeacon.c, interface.c, Makefile.in, config.c, aprx.c,
	  aprx.h, aprx.conf.in, aprsis.c, netbeacon.c:
	    Add a stub of rfbeacon.

2009-10-13  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* interface.c, config.c, netax25.c, ttyreader.c, ax25.c,
	  aprx.h, ChangeLog:
	    Feed received AX.25 frames to interface layer for possible
	    digipeat processing.  (Missing: APRSIS originated frames!)

	* interface.c, ttyreader.c, aprx.h, aprx.conf.in, aprx.8.in:
	    Remodelled serial-device definitions into interface layer.
	    Documentation updates to match new system.

2009-10-13  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprsis.c, aprx.h, config.c, netbeacon.c, aprx.conf.in,
	  VERSION, README, INSTALL, TODO:
	    <aprsis> interface config with new style entry.
	    More of <interface> definitions.
	    Experiments at aprx.conf.in writing.


	* Makefile.in, aprx.8.in, aprx.conf.in, aprx.h, config.c,
	  filter.c, interface.c, netax25.c, netbeacon.c, pbuf.c,
	  pbuf.h, ttyreader.c:
	    Incremental work on new style of configurations
	    as outlined in the Requirement Specification document.
	    Old style configurations do still work.
	    Serial port initstring is now binary transparent.

2009-10-05  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION: 1.06

	* netbeacon.c:
	    Complete beacon coordinate validator code, now it
	    can detect invalid input values properly.

	* netax25.c, aprsis.c, ttyreader.c, igate.c, aprx.h:
	    Cleaning gcc -Wall warnings on various platforms,
	    including OpenBSD.

2009-10-01  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION: 1.05

	* kiss.c, netax25.c, ttyreader.c, aprx.h, ax25.c:
	    Write the SMACK frame with correctly escaped CRC.
	    Fixed also serial-port initstring handling.

2009-09-30  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION: 1.04

	* netax25.c:
	    When writing AX.25 KISS frame to kernel, try to do it
	    up to 3 times.  Also add some debug statements on
	    ax25-rxport processing.

	* VERSION: 1.03

	* ttyreader.c:
	    Fix on serial port startup - always turn on flows on
	    the port, and explicitely flush the driver level
	    buffers discarding possibly accumulated data.

2009-09-28  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION:  1.02

	* erlang.c, aprx-stat.c, aprx.h:
	    Remove subport from erlang codes, having "tncid N" on serial
	    port definitions takes care of this kind of things.

	* kiss.c, ttyreader.c, netax25.c, ax25.h:
	    Moved KISS/SMACK encoder to separate module, the CRC16 calculator
	    went there as well.  For each ttyreader sub-tncid there is
	    separately opened KISS-pty channel on Linux systems with given
	    callsign as interface's writer channel.  The  netax25 ax25-port
	    reader does not accept packets with source callsign as any of
	    our ttyreader callsigns.

	* erlang.c:
	    Fix the erlang_find() to really find the interface call.

2009-09-07  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* cellmalloc.c, netax25.c, keyhash.c:
	    Compiling at OS/X found a few odd problems, corrected.

2009-08-30  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.8.in, aprx.conf.in, config.c, aprx.h, aprx.c, telemetry.c,
	  netax25.c, netbeacon.c, aprsis.c, ttyreader.c, erlang.c, 
	  aprx-stat.c:
	    Rename the "mycall" configuration parameter to "aprsis-login",
	    what it really is being used at.  There is no "mycall", anywhere!

	* dupecheck.c, aprx.h, aprx.c, [dupecheck.h]:
	    Removed dupecheck.h after incorporating it into aprx.h.
	    Added the poll-interfaces to handle housekeeping operations.

	* beacon.c -> netbeacon.c, Makefile.in, aprsis.c, aprx.c, aprx.h:
	    Change file name, and all references therein.
	    A preparation for separate RF beacons.

	* netbeacon.c, aprx.8.in, aprx.conf.in:
	    Add "netbeacon dest APRS via NOGATE ..."  options for configuration.

	* netbeacon.c:
	    Use float math to determine next event times for all beacons
	    for smoother distribution.

2009-08-29  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* Makefile.in, dupecheck.c, dupecheck.h, aprx.c, aprx.h, aprsis.c:
	    Add infrastructure for future:  dupecheck()

	* telemetry.c:
	    Add "NOGATE" on telemetry messages transmitted to APRSIS.

	* igate.c:
	    Deeper look into Rx-IGate specs revealed couple missing details.
	    More bits towards Tx-IGate.

2009-08-23  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION, INSTALL:
	    Mark version as: 1.00

	* aprx.c:
	    Document '-L' option.

	* aprx.h, aprsis.c, beacon.c, igate.c:
	    New internal API to pass data from  aprx proper, and APRS-IS
	    communicator.  This is able to carry binary (including NUL
	    bytes) data both on received AX.25 address, and frame content.

	* telemetry.c:
	    Change a bit on information texts, and transmit frequency.

	* aprx.conf.in, aprx.8.in:
	    Edit prototype configurations, and documentation

	* aprx.c, aprx.h, igate.c, cellmalloc.h, historydb.h, historydb.c,
	  keyhash.h, keyhash.c, pbuf.h, parse_aprs.c:
	    Preparing infrastructure for TX capable i-gate, and digipeater.

2009-02-10  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* Makefile.in, aprsdigi.c, igate.c, aprx.h, ax25.c, ttyreader.c,
	  netax25.c, aprsis.c:
	    Move rx-igate code to igate.c,and make initial moves to
	    collect information about what to do for tx-igate.

	* PROTOCOLS, TODO, README:
	    Document updates.

2008-12-07  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c, aprsis.c, netax25.c, configure.in, ttyreader.c, Makefile.in:
	    Compile testing to get this to work on Solaris 10.
	    Also fixes on PIPE failure handling (correct SIGPIPE ignoring)
	    on platforms other than Linux -- and possibly also for Linux.
	    Now this should drop in to FreeBSD and OS/X as well.

2008-10-28  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* netax25.c, aprx.8.in:
	    Turned upside-down the meaning of  ax25-rxport  config
	    parameter.  There is no longer a wild-card receiving
	    mode in Linux internal AX.25 network receiving.
	    All APRS receiving interface callsigns must be listed
	    explicitely.

	* netax25.c, ttyreader.c, aprx.h:
	    SMACK probe transmits on link that is configured for it.
	    Also offers some debug messages on SMACK activation.

	* beacon.c, ax25.c:
	    Cleaning debug printouts

2008-07-18  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* config.c:
	    Function for validate of callsign input syntax

	* telemetry.c:
	    Please the compiler a bit, increment the telemetry
	    sequence number only after all telemetered interfaces
	    have been reported.

	* aprsis.c:
	    If there is need to reconnect to APRSIS, pick all possible
	    IP addresses for it, and use them all.  Also improved
	    the use of new IP resolver API a bit.

	* ttyreader.c:
	    Explicitely set "KISSSTATE_SYNCHUNT = 0" in enumeration.
	    Memory blocks are created with memset() call clearing them.

	* aprx.h, beacon.c:
	    Compiler pleasing

	* erlang.c:
	    One-off array size handling, resulted in SEGV...

2008-04-11  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION:
	    0.22:

	* erlang.c:
	    Auto-embed the erlang-dataset if backing-store open fails.

	* ttyreader.c:
	    Mark closed socket as closed.

2008-03-29  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION:
	    0.21

	* telemetry.c:
	    New "send Erlang data as telemetry packets to APRS-IS"
	    subsystem.

	* aprsis.c:
	    Fix the APRS-IS network login protocol.  There are TWO
	    parameter strings after the "vers" keyword.

	* configure.in, Makefile.in, erlang.c:
	    Support compilation as embedded target.  Then the erlang
	    datasets are not off-loadable to the memory mapped files,
	    rather they are very small in-memory tables.

	* erlang.c, aprx.h, telemetry.c, ax25.c, aprx-stat.c:
	    Support for telemetry sending out info on received packets.

	* beacon.c:
	    Improve input validation.

2008-02-18  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION: aprx-0.18

	* aprx.8.in, aprx.conf.in, beacon.c:
	    New syntax to define netbeacons.  Also support older methods.

	* config.c:
	    Bug in  config_SKIPTEXT  quoted string termination scanning.

	* netax25.c, aprsis.c, aprx.h:
	    Removing dead code, hooks for future "TNC2 -> AX.25"

	* ttyreader.c:
	    Send received KISS frames to system internal AX.25 network,
	    if host has such (such as Linux)

2008-02-03  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* configure.in, netax25.c,
	    autodetect header <pty.h>, and libutil function openpty().

	* netax25.c, aprx.h, aprx.c:
	    Rearranged  netax25 module initing - to happen _latter_.

	* ttyreader.c, aprx.h, netax25.c:
	    kissencoder() function

	* ttyreader.c, aprx.h, netax25.c:
	    On Linux, use openpty() to create an AX.25pseudo-device on
	    which we then can push AX.25 format packets received from
	    non-AX.25 interfaces.  This will itself also _ignore_ packets
	    received from this created interface.

	* beacon.c:
	    "for" attribute for beacon messages, thus this system
	    can claim to be sending the beacons on behalf of others.

	* ax25.c, aprx.h:
	    parse_ax25addr() function.

	* config.c, aprx.8.in, aprx.conf.in:
	    The mycall parameter must be all uppercase AX.25 valid
	    callsign, and must not be same as any other callsign
	    in system internal AX.25 network.  (This is meaningful
	    only on Linux systems..)

	* Makefile.in:
	    Just some cleanup

2008-01-30  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprsis.c:
	    Spotted watchdog doing reconnects every 2 minutes
	    (like it is supposed to be), and realized that
	    it really should not care what the server says,
	    just that server is saying something...

	* erlang.c:
	    A bug in backing-store map protection logic.

	* aprx.c:
	    See if pidfile exists.  If it does and the start
	    is not for foreground, refuse to run if process
	    given in the pidfile does exist.

	* aprx.8.in, config.c, netax25.c, ttyreader.c, aprsis.c,
	  aprx.h, ax25.c, aprx.conf.in, beacon.c:
	    New "callsign" config parameter for "radio serial" ports.
	    messages received from given port are sent out using that
	    callsign.    Revamp the whole config parsing.

	* aprsis.c:
	    Smarter main-loop to aprs-is loop  message pass preparation
	    and usage codes -- pass a struct block as message leader.

	* ttyreader.c, netax25.c, aprsis, ax25.c, beacon.c, aprx.h:
	    Pass explicite parameter towards the APRSIS telling, which
	    callsign (radio receiver) the message came in from.

	* aprx.h, config.c, ttyreader.c, beacon.c:
	    Rework config parameter line parsing.  Just one param is
	    processed by the main config reader loop, any further are
	    tasks of the individual subroutines (ttyreader, beacon)


2008-01-26  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* erlang.c:
	    Properly handle r/o share mapping of the aprx.state erlang
	    dataset.  This mode is used by the  aprx-stat  program.

	* netax25.c, aprx.conf.in, aprx.8.in:
	    For each AX.25 socket received packet, query reception
	    interface address and reformat it to TNC2 format.
	    Use that for reception reports, logs, filters etc.
	    Reason: port names given in /etc/ax25/axports do not
	    persist at all!  Even clean system boot may yield
	    different port names than what the file lists.

	* Version 0.17

	* INSTALL, README:
	    Minor edits

	* configure.in, Makefile.in, debian/rules, rpm/aprx.spec.in,
	  Makefile:
	    A bit more coherency on make system regarding linking.
	    Remove generated  Makefile.  (Keep generated  configure !)

	* config.c, ttyreader.c, aprx.conf.in, aprx.8.in:
	    Call the "serialport"  now with name "radio".
	    (Also old one works, so old config does not break.)

	* aprx.h, netax25.c, ax25.c, ttyreader.c:
	    Pass port name down to tnc2_rxgate() function where
	    it is used in rf.log outputs.  A distributed multi-
	    receiver setup log is somewhat .. odd looking when
	    most receivers get same packet.

	* logrotate.arpx.in:
	    Rotate weekly, and compress immediately.
	    Monthly turned out to be too much for "embedded"
	    OH1GSM-1 system.

2008-01-12  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* configure.in, configure, debian/rules, rpm/aprx.spec.in,
	  rpm/aprx.init, Makefile, config.h.in:
	    More RPM / configure rework.

	* configure.in, configure, Makefile.in, Makefile, config.h.in,
	  install-sh, rpm/aprx.spec.in, debian/rules:
	    Had to add minimalistic  configure  script into system for
	    the RPM multi-target compilation to work. 

	* Makefile, rpm/aprx.spec.in, rpm/aprx.default, rpm/aprx.init:
	    RPM package build framework, including init and logrotate -scripts

2008-01-10  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* version 0.16

	* erlang.c:
	    Make the logged data narrower - to usually fit in 80 char lines.

	* aprx.c:
	    Always close STDIN from reading, and replace it with
	    a file handle opened on /dev/null.
	    When daemoning, close also STDOUT and STDERR, and
	    replace them with handles writing to /dev/null.
	    .. and do it as late as possible.

	* aprx.h, aprx.c, config.c, erlang.c, aprx.8.in, aprx.conf.in,
	  aprx-stat.c:
	    Add (and document) option for logging erlang data on separate
	    file without any runtime options or need to divert stdout
	    or syslog anywhere.

2008-01-08  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.h, ttyreader.c, erlang.c, netax25.c, aprx-stat.c:
	    When talking with multi-drop KISS, account each TNC
	    separately.

2008-01-07  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* version 0.15

	* erlang.c:
	    Do not double-open the state backingstore file

	* aprsis.c:
	    Remember to close the opened log files.

	* ttyreader.c:
	    Support case of _no_ serialports (reading only via AX.25 net)

	* Makefile, logrotate.aprx.in:
	    Put aprx logs on /var/log/aprx/,  and have monthly rotate.

	* debian/*, Makefile:
	    Debian package building infrastructure

	* aprx.8.in, aprx.conf.in:
	    A bit elaboration on how to add multiple entries of
	    aprsis-server, and  serialport  definitions.

	* aprsis.c, ttyreader.c, aprx.8.in, aprx.conf.in:
	    Remove last vestiges of program having any hardwired limits
	    on number of anything.  There are (of course) lots of
	    parameters that are singletons, but all multiples are
	    now unlimited (within memory limits..)

	* Makefile:
	    "make install"  does install the  CFGFILE (aprx.conf)
	    if it does not have to overwrite the thing.
	    "make dist" is even more interesting beast..

2008-01-06  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* version 0.14

	* ttyreader.c, aprx.conf.in, aprx.8.in:
	    Support TNC2 monitor format on reception.

	* ttyreader.c, aprx.conf.in, aprx.8.in:
	    Overload the "serialport" configuration option with a mechanism
	    to define a IP-literal addressable remote TCP port somewhere
	    with e.g. KISS TNC on it.

2008-01-05  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* Makefile:
	    Radical revisioning, Best Current Practice

	* aprx.c:
	    Write aprx.pid  file in all cases, not only when starting
	    as daemon.

	* version 0.13

	* aprx.h, aprx.c, erlang.c, aprx-stat.c:
	    Modifications on shared memory segment head, stores
	    MYCALL, correct running process PID.

	* INSTALL:
	    Some text fixes

	* aprx-stat.c, aprx.h, erlang.c:
	    Report also server process PID on the SNMP dataset,
	    and time in seconds since it was started.

	* ax25.c:
	    Verify TNC2 format APRS message's FROM>DEST,VIA,VIA:
	    callsigns to be of proper syntax.

	* Makefile, aprx.8, aprx.8.in, aprx-stat.8, aprx-stat.8.in,
	  aprx.conf, aprx.conf.in:
	    Centralized a bit of configuring into Makefile, generating
	    files from *.in versions.

	* aprxpolls.c:
	    Library function used everywhere, part of "eliminate fixed
	    size preallocations" -task.

	* aprsis.c:
	    Debug logging improvements, parent death detection.
	    Preserved MAXAPRSIS setting - of 10 servers.

	* ttyreader.c:
	    Unfix the number of TTYs, now can be as many as one wants.

	* config.c, aprx.c, aprx.h, aprx.conf.in, aprx.8.in:
	    pidfile configuration parameter, and its usage

2008-01-04  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* VERSION, arpx.c, Makefile, aprx.8, aprx.8.in,
	  aprx-stat.8, aprx-stat.8.in:
	    Define system version in VERSION file, have it stamped
	    on programs and packages.

	* config.c:
	    The "aprxlog" and "rflog" parameters were interchanged
	    at some point.

	* aprx.c, aprsis.c, beacon.c:
	    Complain loudly with -d or -v options on, and if the
	    configuration does not set global  mycall  parameter.
	    Do not refuse to run, though!  This is perfectly valid
	    for things like Erlang-monitoring.

2007-12-29  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* version aprx-v0.12

	* PROTOCOLS:
	    Writeup of existing (and planned) protocols that this
	    software uses.

	* ax25.c:
	    Correct processing of 3rd-party frames.
	    Also separate TNC2 formatted frame Rx-igateing rules
	    from AX.25-to-TNC2 format translation routine.

	* ax25.c, beacon.c, aprsis.c:
	    Centralize the APRSIS communication line ending CRLF char pair
	    addition into common code, not distributed all over.

2007-12-25  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* version aprx-v0.11

	* TODO, README:
	    Cleanup

	* config.c, netax25.c, aprx.8, aprx.conf:
	    Config option "ax25-rxport" - Limits acceptance of APRS
	    packets only from listed Linux AX.25 ports.

	* ttyreader.c, aprx.conf, aprx.8:
	    Reworked a bit of the serialport config options.
	    Now initstring, and various KISS modes are configurable

	* erlang.c:
	    Carefull approach on erlang-file opening, if file exists,
	    and is non-zero size, open it only if magics match.

	* config.c:
	    config_SKIPTEXT() terminates all scanned strings with NUL byte,
	    and moves to byte following it, if the termination byte was not
	    a NUL byte originally.

	* aprx-stat.c, aprx-stat.8:
	    Option -t  to show timestamps differently.

	* Makefile, man-to-html.sh:
	    Produce decent format HTML versions of the man-pages.

	* config.c, erlang.c, aprx.8, aprx.conf:
	    Added "erlang-log1min" option to control 1 minute interval
	    Erlang sampling logging behaviour.

	* Makefile:
	    Fix "make install" of man-pages

	* version aprx-v0.10

	* aprx-stat.c, aprx-stat.8, erlang.c, Makefile:
	    Statistics reporter tool.

	* aprsis.c, config.c, aprx.8, aprx.conf:
	    Multiple aprsis-server  config definitions are now
	    supported, and used in round-robin fashion.

	* ax25.c, config.c, aprx.8, aprx.conf:
	    Config option  ax25-filter

	* ttyreader.c, erlang.c:
	    Magic channel capacity constant expressions updated..

2007-12-23  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprx.c, aprx.h, aprsis.c, aprx.8, aprx.conf, ax25.c, erlang.c:
	    Multiple configuration file options, rf-log, and aprx-log -files,
	    related documentation.

	* config.c, aprx.8:
	    Special quoted-string escape processing.

	* version aprx-v0.08

	* erlang.c, aprx.c, aprx.h:
	    Erlang data has now a mmap():ed filesystem based backing-store.
	    Erlang-data can be syslog()ed, and independently of that,
	    it can be printed on STDOUT.  Default syslog facility is "NONE".

	* Great Rename -- the thing is now called:  aprx

2007-12-06  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* aprsg.8, erlang.c, aprsg.c, netax25.c, ttyreader.c:
	    Erlang logging now uses syslog(3), unless explicitely told to use
	    output to stdout.  Also the Erlang log format was altered a bit,
	    now it reports also number of packets in the interval.

	* erlang.c, Makefile:
	    "make ERLANG1=1" compiles in also 1 minute erlang logging interval.

	* aprsis.c:
	    Code refactored to put the APRS-IS communication into its own
	    fork()ed sub-process communicating via a socketpair() with the
	    main loop.   Now reconnection time with the APRS-IS server does
	    not affect functionality of the main loop.

2007-12-05  Matti Aarnio - OH2MQK - KP20NG  <oh2mqk@sral.fi>

	* ChangeLog
	   Opened for the first time.  Version 0.06.

