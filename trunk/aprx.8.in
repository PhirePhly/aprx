.TH aprx 8 "@DATEVERSION@"
.LO 8
.SH NAME
.B aprx
\- A receive-only APRS iGate application,
.SH SYNOPSIS
.B aprx
.RB [ \-d [ d ]]
.RB [ \-e ]
.RB [ \-v ]
.RB [ \-l " \fIsyslogfacilityname\fR]"
.RB [ \-f " \fI@CFGFILE@\fR]"
.SH DESCRIPTION
.B aprx
is a
.I receive-only
APRS iGate application with minimum system support technology requirements.
.PP
.IP \(bu 3
Does not require machine to have any other software in it, than things in libc.
In particular no special AX.25 libraries at all, nor widgets or even
C++ runtime.
.IP \(bu 3
Can listen "TNC2 monitor" and "KISS" speaking TNCs on serial ports.
.IP \(bu 3
The serial port can be ordinary host computer port, a USB serial port, or 
remote port on a remote server behind the internet, like cisco router AUX
ports (port 4001, TCP STREAM without TELNET escapes.)
.IP \(bu 3
Does not require machine to have AX.25 protocol support internally!
(Thus this works also on e.g. BSD machines without PF\_AX25 sockets.)
.IP \(bu 3
On Linux machine with kernel internal AX.25 protocol support, does listen
on it with promiscuous mode, and in order to use that, must be started
as
.I root
user.
The AX.25 socket listening is
.I not
configurable, it is always on in Linux systems.
This listening does not need "libax25" to function.
.IP \(bu 3
Not running the program as root is a viable option at least against
remote serial port servers.  One must change local serial port ownership
(if any are used) to userid that runs the program and possibly do several
changes of file paths in configuration file beginning with its location
(startup parameter).  How that is done is up to the user of this program.
.IP \(bu 3
Connects with one callsign-ssid pair to APRS-IS core for all received radio
ports.
.IP \(bu 3
Knows that messages with following tokens in AX.25 VIA fields are not to be
relayed into APRS-IS network:
.RS 9
.B "RFONLY, NOGATE, TCPIP, TCPXX"
.RE
.IP \(bu 3
Knows that following source address prefixes are bogus and thus messages with
them are to be junked:
.RS 9
.B "WIDE, RELAY, TRACE, TCPIP, TCPXX, NOCALL, N0CALL"
.RE
.IP \(bu 3
Drops all
.I query
messages ("?").
.IP \(bu 3
Opens up all 3rd party messages ("}"), and checks the internal data if it is OK
to be gated out to APRS-IS.
.IP \(bu 3
Has built-in "Erlang monitor" mechanism, that logs to syslog a interface
specific channel occupancy.   Optionally can log to STDOUT and/or to syslog.
.PP
.SH OPTIONS
The
.B aprx
has following runtime options:
.TP
.B "\-d"
Turn on verbose debugging, outputs data to STDOUT.
.TP
.B "\-dd"
the "more debug" mode shows also details of network interaction with
the APRS-IS network service.
.TP
.B "\-e"
.I "Erlang output"
prints 10 minute and 60 minute traffic accumulation byte counts, and guestimates
on channel occupancy, alias "Erlang".
These outputs are sent to STDOUT, which system operator may choose to log elsewere.
This is independent if the "\-l" option below.
.TP
.BI "\-f " "@CFGFILE@"
Configuration file, given path is built-in default, and can be overridden by the program runner.
.TP
.BR "\-l" " \fIsyslogfacilityname\fR"
Defines
.RB syslog (3)
facility code used by the erlang reporter by defining its name.
Default value is:
.BR NONE ,
and accepted values are:
.BR LOG_DAEMON ,
.BR LOG_FTP ,
.BR LOG_LPR ,
.BR LOG_MAIL ,
.BR LOG_NEWS ,
.BR LOG_USER ,
.BR LOG_UUCP ,
.BR LOG_LOCAL0 ,
.BR LOG_LOCAL1 ,
.BR LOG_LOCAL2 ,
.BR LOG_LOCAL3 ,
.BR LOG_LOCAL4 ,
.BR LOG_LOCAL5 ,
.BR LOG_LOCAL6 ,
.BR LOG_LOCAL7 .
That list is subject to actual facility code set in the system,
and in any case if you specify a code that is not known, then the program
will complain during the startup, and report it.
This is independent of the "\-e" option above.
.TP
.B "\-v"
Verbose logging of received traffic to STDOUT.
Lines begin with reception timestamp (UNIX time_t seconds), then TAB,
and either data as is, or with prefix byte: "*" for "discarded due to data content",
or possibly "#" for "discarded due to APRS-IS being unreachable".
.PP
.SS DEBUGGING SYSTEM
Use parameter set 
.B "\-ddv"
to test new configuration by running it synchronously to console.
.PP
.SS NORMAL OPERATION
Running the
.B aprx
program without any of option flags:
.BR "\-d" ,
.BR "\-v" ", or"
.B "\-e"
reads possibly given configuration, then automatically backgrounds the process, and writes
.IR pidfile .
When the process whose number written in
.I pidfile
is then sent a SIGTERM signal, it automatically shuts down itself, and removes the
.IR pidfile .
The
.I pidfile
can be runtime configured with the
.BI \-f " @CFGFILE@"
file, and it has default name of:
.IR "@VARRUN@/aprx.pid" .
.PP

.SH CONFIGURATION FILE
The configuration file is used to setup the program to do its job.
Some configurations can be done without the file, namely a channel
.I "Erlang monitor"
siphoning APRS packets off the Linux kernel AX.25 network stack.
.PP
.PP
On the configuration file, following additional notes
.IP \(bu 2
Most parameters are singletons, that is, there can be only one.
.IP \(bu 2
There can be unlimited number of "aprsis-server" lines, and each
can be followed by own "aprsis-heartbeat-timeout", and "aprsis-filter"
lines.
.IP \(bu 2
There can be unlimited number of "radio" lines.
.IP \(bu 2
There can be unlimited number of "netbeacon" lines.
.IP \(bu 2
There can be unlimited number of "ax25-filter" lines.
.IP \(bu 2
There can be unlimited number of "ax25-rxport" lines.
.PP
The configuration file is read upon program start,
it is never re-read during process life.
.nf
\fC
#
#  Sample configuration file for the APRX \-\- an Rx\-only APRS iGate
#

# The  mycall  parameter: 
# Station call\-id used for relaying APRS frames into APRS\-IS.
#
#mycall           N0CALL\-1

# APRS-IS server name and portnumber.
# Every reconnect does re\-resolve the name to IP address.
# There can be as many definitions as you want, and they will be
# used in round\-robin fashion.  Heartbeat and filter definitions
# must follow each server definition.
#
#aprsis\-server    rotate.aprs.net  14580

# Some APRS\-IS servers tell every about 20 seconds to all contact
# ports that they are there and alive. Others are just silent.
# Enable only if the server you use does present heartbeat.
# Recommended value 3*"heartbeat" + some  \-> 120 (seconds)
#
#aprsis\-heartbeat\-timeout   120

# APRS\-IS server may support some filter commands.  Although this
# program does not transmit out to RF, filter rules can be used to
# ensure that there is sufficient dataflow from APRS\-IS server to
# this program that it very likely will not timeout within network
# monitoring timeout..
#
#aprsis\-filter "some filter specs in quotes"

# Additional APRS\-IS servers can be entered, by repeating following
# three configuration entries as many times as are needed.
#
#aprsis\-server             rotate.aprs.net 14580
#aprsis\-heartbeat\-timeout  120
#aprsis\-filter             "some filter specs in quotes"

# AX.25 filters block selected messages matching on selected regular
# expressions.  The expressions are case sensitive, and AX.25 address
# elements are in all uppercase text.  There can be unlimited number
# of patterns, type fields are four: "source", "destination", "via",
# and "data".  These patterns can be used in addition to built\-in
# hard\-coded reject rules listed in documentation.
#
#ax25\-filter source      "^NOCALL"
#ax25\-filter destination "^NOCALL"
#ax25\-filter via         "^NOGATE"
#ax25\-filter data        "^\\\\?"

# ax25\-rxport limits reception on listed AX.25 ports, if system
# happens to use AX.25 ports also for other purposes than APRS.
# If this option is not used, all reception ports are accepted.
# Number of port definitions here is unlimited.
#
#ax25\-rxport ax0
#ax25\-rxport ax1

# pidfile is UNIX way to tell that others that this program is
# running with given process-id number.  This has compiled-in
# default value of:  pidfile @VARRUN@/aprx.pid
#
#pidfile @VARRUN@/aprx.pid

# rflog defines a rotatable file into which all RF-received packets
# are logged.
#
#rflog @VARLOG@/aprx\-rf.log

# aprxlog defines a rotatable file into which most important 
# events on APRS\-IS connection are logged, namely connects and
# disconnects.
#
#aprxlog @VARLOG@/aprx.log

# erlangfile defines a mmap():able binary file, which stores
# running sums of interfaces upon which the channel erlang
# estimator runs, and collects data.
# Depending on the system, it may be running on a filesystem
# that actually retains data over reboots, or it may not.
# With this backing store, the system does not loose cumulating
# erlang data over the current period, if the restart is quick,
# and does not stradle any exact minute.
# (Do restarts at 15 seconds over an even minute..)
# This file is around 0.5 MB per each interface talking APRS.
# Things go BADLY WRONG if this file can not be created or
# it is corrupted!
#
# Built\-in default value is: @VARRUN@/aprx.state
#
erlangfile @VARRUN@/aprx.state

# erlang\-loglevel is config file edition of the "\-l" option
# pushing erlang data to syslog(3).
# Valid values are (possibly) following: NONE, LOG_DAEMON,
# LOG_FTP, LOG_LPR, LOG_MAIL, LOG_NEWS, LOG_USER, LOG_UUCP,
# LOG_LOCAL0, LOG_LOCAL1, LOG_LOCAL2, LOG_LOCAL3, LOG_LOCAL4,
# LOG_LOCAL5, LOG_LOCAL6, LOG_LOCAL7.  If the parameter value is
# not acceptable, list of accepted values are printed at startup.
#
#erlang\-loglevel NONE

# erlanglog defines a rotatable file into which erlang data
# is written in text form.
#
#erlanglog @VARLOG@/erlang.log

# erlang\-log1min option logs to syslog/file also 1 minute
# interval data from the program. (In addition to 10m and 60m.)
#
#erlang\-log1min

# The  radio serial   option.  Parameters are:
#   \- /dev/ttyUSB1    \-\- tty device
#   \- 19200           \-\- baud rate, supported ones are:
#                        1200, 2400, 4800, 9600, 19200, 38400
#   \- 8n1             \-\- 8\-bits, no parity, one stop\-bit,
#                        no other supported modes
#   \- KISS/XORSUM/BPQCRC/SMACK/CRC16  \-\- KISS mode variants
#     TNC2            \-\- non\-KISS text format variant
#
#
#radio serial /dev/ttyUSB0  19200 8n1    KISS
#radio serial /dev/ttyUSB1  19200 8n1    TNC2

# Additional/alternate options for the "radio" line.
#
# "initstring" is of two parts, the keyword, and then a string.
#    initstring "\\xC0\\xC0\\xFF\\xC0\\r\\nMO 0\\rKISS $01\\r"
#
# "alias NAME" sets name used in statistics displays.
#    If none are given, then it will use physical port name.
#
# "timeout 900" sets a timeout monitor (in seconds) to make
#    reopen/reconnect if the (tcp) connection to radio has
#    failed somehow and nothing is heard. Local serial ports
#    do not (in general) need this.  At APRS silent sites
#    this may cause repeated reconnects, but it should not
#    harm either.  At busy sites this will handle reconnect
#    gracefully in case of network failures, and timeout
#    value can be shortened.
#
#  "KISS"                  \- plain basic KISS mode
#  "XORSUM" alias "BPQCRC" \- KISS with BPQ "CRC" byte
#  "SMACK" alias "CRC16"   \- KISS with better CRC
#  "TNC2"                  \- TNC2 monitor format

# The  \fBradio tcp\fC  option defines a connection to remote socket
# beyond which is a binary transparent connection to a serial
# port.  The parameter fields:  literal IP address (IPv4 or IPv6),
# then literal port number, and finally protocol mode.
# KISS-protocol parameters are same as with normal serial port.
#
#radio tcp  12.34.56.78  4001  KISS  alias Rx5  timeout 300
#radio tcp  12.34.56.78  4002  TNC2  alias Rx6  timeout 900
#

# The  netbeacon  options.
# Parameter string (in quotes) is sent to network (without quotes)
# at varying intervals \-\-  1200\-1800 seconds in between restransmits.
# This interval is intentionally randomized.
#
# There can be multiple netbeacon options.
# Symbol  R&   is for "rx\-only iGate"
#
#netbeacon  "!6016.35NR02506.36E&aprx Rx\-only 'iGate'"

\fR
.fi
.PP
In the configuration file there is special treatment for quoted strings.
They are stripped of the outer quotes, and "\fC\\\fR" character is processed within
the source string to produce an output string.
The escapes are:
.TP
.B "\fC\\\\n"
Produces newline character (Control-J) on the output string.
.TP
.B "\fC\\\\r"
Produces carriage return character (Control-M) on the output string.
.TP
.B "\fC\\\\\\\\"
Places a back-slash on the output string.
.TP
.B "\fC\\\\""
.\" foo "
Places a double-quote on the output string.
.TP
.B "\fC\\\\'"
Places a single-quote on the output string.
.TP
.B "\fC\\\\xHH"
Lower-case "x" precedes two hex digits which ensemble is then converted to a single byte in the output string.
.PP
The complex encodings are for possible init-strings of the external devices,
.I "however: a nul byte is not possible to produce as it terminates a string!"
( = "\fC\\x00\fR" )
.PP
A configuration token without surrounding quotes does not understand the backslash escapes.


.SH RADIO PORTS
Radio ports can be connected several ways to this program:
.IP \(bu 2
Local serial ports in the machine
.RI ( " radio serial /dev/ttyS0 " )
.IP \(bu 2
Local USB serial ports in the machine
.RI ( " radio serial /dev/ttyUSB0 " )
.IP \(bu 2
Remote served serial ports over a TCP stream.
.RI ( " radio tcp 12.34.56.78 4001 " )
.br
Implemented to talk with Cisco AUX ports on "range 4000"
(TCP STREAM, no TELNET escapes)
.PP
The serial port name tells what kind of port is in question,
and while port baud-rate (9600) and character settings (8n1)
must always be set, they are ignored for the remote connection.
.PP
The KISS encapsulation details must also be specified, and they
are used in all cases.

.SH NOTES: ERLANG
The
.I Erlang
is telecom measurement of channel occupancy, and in this application sense
it does tell how much traffic there is on the radio channel.
.PP
Most radio transmitters are not aware of all transmitters on channel,
and thus there can happen a collision causing loss of both messages.
The higher the channel activity, the more likely that collision is.
For further details, refer to statistical mathematics books, or perhaps
on Wikipedia.
.PP
In order to measure channel activity, the
.B aprx
program suite has these built-in statistics counter and summary estimators.
.PP
The
.I Erlag
value that the estimators present are likely somewhat
.I underestimating
the true channel occupancy simply because it calculates estimate of channel
bit transmit rate, and thus a per-minute character capacity.
It does not know true frequency of bit-stuffing events of the HDLC framing,
nor each transmitter pre- and port frame PTT times. The transmitters need to
stabilize their transmit oscillators in many cases, which may take up to
around 500 ms!
The counters are not aware of this preamble-, nor postamble-times.
.PP
The HDLC bit stuffing ratio is guessed to be 8.2 bits for each 8 bits of payload.

.SH NOTES: PROGRAM NAME
Initially this program had name
.IR aprsg-ng ,
which was same as another (less low-tech C++ approach) had.

.SH BUGS
The
.IR Erlang -monitor
mechanisms are of rudimentary quality, and can seriously underestimate the channel occupancy.

.SH SEE ALSO
Couple web sites:
.IR "http://www.aprs-is.net/" ,
.I "http://www.aprs2.net/"
.PP
.BR aprx-stat (8)

.SH AUTHOR
This little piece was written by
.I "Matti Aarnio, OH2MQK"
during a dark and rainy fall and winter of 2007-2008 after a number
of discussions grumbling about current breed of available software
for APRS iGate use in Linux (or of any UNIX) platforms.
.PP
Principal contributors and test users include:
.IR "Pentti Gronlund, OH3BK" ,
.IR "Reijo Hakala, OH1GWK" .
Debian packaging by
.IR "Kimmo Jukarinen, OH3GNU" .
