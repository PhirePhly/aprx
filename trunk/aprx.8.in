.TH aprx 8 "@DATEVERSION@"
.LO 8
.SH NAME
.B aprx
\- A receive-only APRS iGate application with integrated Digipeater.
.SH SYNOPSIS
.B aprx
.RB [ \-d [ d [ d ]]]
.RB [ \-e ]
.RB [ \-v ]
.RB [ \-l " \fIsyslogfacilityname\fR]"
.RB [ \-f " \fI@CFGFILE@\fR]"
.SH DESCRIPTION
.B aprx
begun as a
.I receive-only
APRS iGate application with minimum system support technology requirements.
This version has also multi-port digipeater support, and plans include to
add transmit iGate.
.PP
.IP \(bu 3
The Aprx does not require machine to have any other software in it, than things
in UNIX standard libc. In particular no special AX.25 libraries at all, nor
widgets or even C++ runtime.
.IP \(bu 3
Any UNIX platform should work for the Aprx, or be trivially ported.
(uCLinux needing a bit more work.)
.IP \(bu 3
The Aprx can listen "TNC2 monitor" and "KISS" speaking TNCs on any serial ports.
.IP \(bu 3
For Aprx the serial port can be ordinary host computer port, a USB serial port,
or remote port on a remote server behind the internet, like cisco router AUX
ports (port 4001, TCP STREAM without TELNET escapes.)
.IP \(bu 3
The Aprx does not require machine to have AX.25 protocol support internally!
(Thus this works also on e.g. Solaris and BSD machines without PF\_AX25 sockets.)
.IP \(bu 3
On Linux machine with kernel internal AX.25 protocol support, can listen
on it with promiscuous mode, and in order to use that, must be started as
.I root
user, and be configured to list interface callsigns that APRS packets are
coming in.
The AX.25 socket listening is not in itself configurable, it is always exists
in Linux systems, and related configuration parameters are ignored in other
platforms.
This socket listening does not need auxiliary "libax25" to function.
.IP \(bu 3
The Aprx program can be run without root privileges at least against remote
serial port servers.  One must change local serial port ownership or
access-groups (if any are used) to userid that runs the program and possibly
do several changes of file paths in configuration file beginning
with its location (startup parameter).
How that is done is up to the user of this program.
.IP \(bu 3
The Aprx connects with one callsign-ssid pair to APRS-IS core for all received
radio ports.
.IP \(bu 3
The Aprx Rx-iGate knows that messages with following tokens in AX.25 VIA
fields are not to be relayed into APRS-IS network:
.RS 9
.B "RFONLY, NOGATE, TCPIP, TCPXX"
.RE
.IP \(bu 3
The Aprx Rx-iGate knows that following source address prefixes are bogus and
thus messages with them are to be junked:
.RS 9
.B "WIDE, RELAY, TRACE, TCPIP, TCPXX, NOCALL, N0CALL"
.RE
.IP \(bu 3
The Aprx Rx-iGate Drops all
.I query
messages ("?").
.IP \(bu 3
The Aprx Rx-iGate opens up all 3rd party messages ("}"), and checks the internal
data if it is OK to be gated out to APRS-IS.
.IP \(bu 3
The Aprx has built-in "Erlang monitor" mechanism that telemeters each receiving
interface to APRS-IS. It can also syslog the interface specific channel occupancy,
and optionally can output to STDOUT.
.IP \(bu 3
The Aprx can be run on systems without writable storage, even with very little
memory, like on NSLU2, and OpenWrt platforms.
.IP \(bu 3
The Aprx (since version 1.91) can do digipeater functions.
.PP
.SH OPTIONS
The
.B aprx
has following runtime options:
.TP
.B "\-d"
Turn on verbose debugging, outputs data to STDOUT.
.TP
.B "\-dd"
the "more debug" mode shows also details of network interaction with
the APRS-IS network service.
.TP
.B "\-ddd"
the "even more debug" mode shows also detail classification of
every kind of frame received in KISS variants.
.TP
.B "\-e"
.I "Erlang output"
prints 10 minute and 60 minute traffic accumulation byte counts, and guestimates
on channel occupancy, alias "Erlang".
These outputs are sent to STDOUT, which system operator may choose to log elsewere.
This is independent if the "\-l" option below.
.TP
.BI "\-f " "@CFGFILE@"
Configuration file, given path is built-in default, and can be overridden by the program runner.
.TP
.BR "\-l" " \fIsyslogfacilityname\fR"
Defines
.RB syslog (3)
facility code used by the erlang reporter by defining its name.
Default value is:
.BR NONE ,
and accepted values are:
.BR LOG_DAEMON ,
.BR LOG_FTP ,
.BR LOG_LPR ,
.BR LOG_MAIL ,
.BR LOG_NEWS ,
.BR LOG_USER ,
.BR LOG_UUCP ,
.BR LOG_LOCAL0 ,
.BR LOG_LOCAL1 ,
.BR LOG_LOCAL2 ,
.BR LOG_LOCAL3 ,
.BR LOG_LOCAL4 ,
.BR LOG_LOCAL5 ,
.BR LOG_LOCAL6 ,
.BR LOG_LOCAL7 .
That list is subject to actual facility code set in the system,
and in any case if you specify a code that is not known, then the program
will complain during the startup, and report it.
This is independent of the "\-e" option above.
.TP
.B "\-v"
Verbose logging of received traffic to STDOUT.
Lines begin with reception timestamp (UNIX time_t seconds), then TAB,
and either data as is, or with prefix byte: "*" for "discarded due to data content",
or possibly "#" for "discarded due to APRS-IS being unreachable".
.PP
.SS DEBUGGING SYSTEM
Use parameter set 
.B "\-ddv"
(or
.BR "\-dddv" )
to test new configuration by running it synchronously to console.
.PP
.SS NORMAL OPERATION
Running the
.B aprx
program without any of option flags:
.BR "\-d" ,
.BR "\-v" ", or"
.B "\-e"
reads possibly given configuration, then automatically backgrounds the process, and writes
.IR pidfile .
When the process whose number written in
.I pidfile
is then sent a SIGTERM signal, it automatically shuts down itself, and removes the
.IR pidfile .
The
.I pidfile
can be runtime configured with the
.BI \-f " @CFGFILE@"
file, and it has default name of:
.IR "@VARRUN@/aprx.pid" .
.PP

.SH CONFIGURATION FILE
The configuration file is used to setup the program to do its job.
.PP
You can construct following configurations:
.PP
.IP \(bu 3
A
.I receive-only
iGate server.
.IP \(bu 3
A
.I "single radio"
digipeater.  (The most common type of digipeater.)
.IP \(bu 3
A
.I multi-interfaced
digipeater relaying traffic in between multiple radios.  (On same or on separate frequencies.)
.IP \(bu 3
A
.I "viscuous digipeater,"
which relays a packet it heard from viscuous source after the viscuous delay,
.I unless it was heard more times than only once,
or it was heard from non-viscuous source before the viscuous one was digipeated.
This allows of making fill-in digipeaters that will not digipeat the packet,
if that same packet was heard twice or more before the viscuos delay expired.
.IP \(bu 3
A digipeater with receive-only iGate server.
.PP
This package does contain incomplete bi-directional iGate support,
however as of present version, we do not recommend its use quite yet!
.PP
In the configuration file a line ending backslash (\\) character concatenates
next input line into itself. Combined result can be up to 8000 bytes long.
This combination can be a bit surprising:
.nf
\fC#beacon .... long text  \\
       continuation\fR
.fi
results in single long input line that begins with '#' (it is comment) and all
continuations following it have been folded in.
Presented line number of combined continuation is the line number of the
.I last
line segment in this type of multi-line input.
.PP
In the configuration file there is special treatment for quoted strings.
They are stripped of the outer quotes, and "\fC\\\fR" character is processed within
the source string to produce an output string.
The escapes are:
.TP
.B "\fC\\\\n"
Produces newline character (Control-J) on the output string.
.TP
.B "\fC\\\\r"
Produces carriage return character (Control-M) on the output string.
.TP
.B "\fC\\\\\\\\"
Places a back-slash on the output string.
.TP
.B "\fC\\\\""
.\" foo "
Places a double-quote on the output string.
.TP
.B "\fC\\\\'"
Places a single-quote on the output string.
.TP
.B "\fC\\\\xHH"
Lower-case "x" precedes two hex digits which ensemble is then converted to a single byte in the output string.
.PP
The complex encodings are for possible initstrings of the external devices,
and in particular for initstrings even a nul byte ( \\x00 ) is supported.
.PP
A configuration token without surrounding quotes does not understand the backslash escapes.
.PP
.nf
\fC
#
#  Sample configuration file for the APRX -- an Rx-only APRS iGate with
#  Digipeater functionality.
#
#
# Simple sample configuration file for the APRX-2
#
# This configuration is structured with Apache HTTPD style tags
# which then contain subsystem parameters.
#

#
# For simple case, you need to adjust 4 things:
#   - Mycall parameter
#   - Select correct type of interface (ax25-device or serial-device)
#   - Optionally set a beacon telling where this system is
#   - Optionally enable digipeater with or without tx-igate
#

#
#
# Define the parameters in following order:
#   1)  <aprsis>     ** zero to many
#   2)  <logging>    ** zero or one
#   3)  <interface>  ** one to many
#   4)  <beacon>     ** zero to many
#   5)  <digipeater> ** zero to many (at most one for each Tx)
#

#
# Global macro for simplified callsign definition:
# Usable for 99+% of cases.
#

mycall  N0CALL-1

<aprsis>
# The  login  parameter: 
# Station call\-id used for relaying APRS frames into APRS\-IS.
#
#login      $mycall  # login defaults to $mycall

# APRS-IS server name and portnumber.
# Every reconnect does re\-resolve the name to IP address.
# Some alternates are shown below, choose something local to you.
#
server    rotate.aprs.net    14580
#server    finland.aprs2.net  14580
#server    igates.aprs.fi     14580

# Some APRS\-IS servers tell every about 20 seconds to all contact
# ports that they are there and alive. Others are just silent.
# Recommended value 3*"heartbeat" + some  \-> 120 (seconds)
#
#heartbeat\-timeout  0  # Disabler of heartbeat timeout

# APRS-IS server may support some filter commands.
# See:  http://www.aprs-is.net/javAPRSFilter.aspx
#
# You can define the filter as single long quoted string, or as
# many short segments with explaining comments following them.
#
#filter "possibly multiple filter specs in quotes"
#
#filter "m/100"          # My-Range filter
#filter "f/OH2XYZ\-3/50"  # Friend-Range filter
</aprsis>


<logging>
# pidfile is UNIX way to tell that others that this program is
# running with given process-id number.  This has compiled-in
# default value of:  pidfile @VARRUN@/aprx.pid
#
#pidfile @VARRUN@/aprx.pid

# rflog defines a rotatable file into which all RF-received packets
# are logged.
#
#rflog @VARLOG@/aprx\-rf.log

# aprxlog defines a rotatable file into which most important 
# events on APRS\-IS connection are logged, namely connects and
# disconnects.
#
#aprxlog @VARLOG@/aprx.log

# erlangfile defines a mmap():able binary file, which stores
# running sums of interfaces upon which the channel erlang
# estimator runs, and collects data.
# Depending on the system, it may be running on a filesystem
# that actually retains data over reboots, or it may not.
# With this backing store, the system does not loose cumulating
# erlang data over the current period, if the restart is quick,
# and does not stradle any exact minute.
# (Do restarts at 15 seconds over an even minute..)
# This file is around 0.7 MB per each interface talking APRS.
# If this file is not defined and can not be created,
# internal non-persistent in-memory storage will be used.
#
# Built-in default value is: @VARRUN@/aprx.state
#
#erlangfile @VARRUN@/aprx.state

# erlang\-loglevel is config file edition of the "\-l" option
# pushing erlang data to syslog(3).
# Valid values are (possibly) following: NONE, LOG_DAEMON,
# LOG_FTP, LOG_LPR, LOG_MAIL, LOG_NEWS, LOG_USER, LOG_UUCP,
# LOG_LOCAL0, LOG_LOCAL1, LOG_LOCAL2, LOG_LOCAL3, LOG_LOCAL4,
# LOG_LOCAL5, LOG_LOCAL6, LOG_LOCAL7.  If the parameter value is
# not acceptable, list of accepted values are printed at startup.
#
#erlang\-loglevel NONE

# erlanglog defines a rotatable file into which erlang data
# is written in text form.
#
#erlanglog @VARLOG@/erlang.log

# erlang\-log1min option logs to syslog/file also 1 minute
# interval data from the program. (In addition to 10m and 60m.)
#
#erlang\-log1min
</logging>



# ***********  Multiple <interface> definitions can follow   *********

# ax25\-device  Lists AX.25 ports by their callsigns that in Linux
#              systems receive APRS packets.  If none are defined,
#              or the system is not Linux, the AX.25 network receiver
#              is not enabled.  Used technologies need at least
#              Linux kernel 2.4.x
#
# tx\-ok        Boolean telling if this device is able to transmit.
#
#<interface>
#   ax25\-device $mycall  # Either $mycall macro, or actual callsign
#   #tx\-ok      false  # transmitter enable defaults to false
#</interface>

# The  TNC serial  options.  Parameters are:
#   \- /dev/ttyUSB1    \-\- tty device
#   \- 19200           \-\- baud rate, supported ones are:
#                        1200, 2400, 4800, 9600, 19200, 38400
#   \- 8n1             \-\- 8\-bits, no parity, one stop\-bit,
#                        no other supported modes
#   \- "KISS"                  \- plain basic KISS mode
#   \- "XORSUM" alias "BPQCRC" \- KISS with BPQ "CRC" byte
#   \- "SMACK"  alias "CRC16"  \- KISS with real CRC
#   \- "TNC2"                  \- TNC2 monitor format
#
#<interface>
#   serial\-device /dev/ttyUSB0  19200 8n1    KISS
#   #callsign     $mycall  # Either $mycall macro, or actual callsign
#   #tx\-ok        false    # transmitter enable defaults to false
#</interface>
#
#<interface>
#   serial\-device /dev/ttyUSB1  19200 8n1    TNC2
#   #callsign     $mycall  # Either $mycall macro, or actual callsign
#   #tx\-ok        false    # TNC2 monitor can not have transmitter
#</interface>
#


# ***********  Multiple <beacon>  definitions can follow   *********
<beacon>
#
#  Beacons are sent out to radio transmitters AND/OR APRSIS.
#  Default if "both", other modes are settable.
#
#beaconmode { aprsis | both | radio }
#
#  Beacons are sent from a circullar transmission queue, total cycle time
#  of that queue is 20 minutes by default, and beacons are "evenly"
#  distributed along it.  Actual intervals are randomized to be anything
#  in between 80% and 100% of the  cycle-size / number-of-beacons.
#  First beacon is sent out 30 seconds after system start.
#  Tune the cycle-size to be suitable to your number of defined beacons.
#
#cycle-size  20m
#
# There can be multiple netbeacon options.
# 'for'  parameter sets claimed origination address.
# 'dest' sets destination address, default "APRXnn"
# 'to'   parameter picks an interface (must be "tx-ok true" type)
# 'via'  sets radio distribution pattern, default: none.
# 'type' Single character setting type:  ! = / @ ; )
# 'name' Object (';') and Item (')') type beacons use name.
#
# 'timefix'  On APRS messages with HMS timestamp (hour:min:sec), the
#            system fixes appropriate field with transmit time timestamp.
# 'file' option tells a file at which a _raw_ APRS message content is
#        expected to be found as first line of text. Line ending newline
#        is removed, and no escapes are supported.  The timefix is
#        available, though probably should not be used.
#
# The parameter sets can vary:
#  a) 'for nnn-n dest "string" symbol "R&" lat "ddmm.mmN" lon "dddmm.mmE" [comment "any text"]
#  b) 'for nnn-n dest "string" raw "string"'
#
# The a) form flags on some of possible syntax errors in parameters.
# It will also create only "!" type messages.  The dest parameter
# defaults to "APRS", but can be used to give other destinations.
# The via parameter can be used to add other keywords, like "NOGATE".
#
# Writing correct RAW format beacon message is very hard,
# which is evidenced by the frequency of bad syntax texts
# people so often put there...   If you can not be persuaded
# not to do it, then at least VERIFY the beacon result on
# web service like  findu.com,  or  aprs.fi
#
#beacon               file /tmp/wxbeacon.txt
#beacon for N0CALL\-3 raw "!6016.30NR02506.36E&aprx \- an Rx\-only iGate"
#beacon for $mycall  symbol "R&" lat "6016.30N" lon "02506.36E"  \\
                     comment "aprx \- an Rx\-only iGate"
</beacon>


# ***********  <digipeater>  definition(s) follow   *********
#
#  The digipeater definitions tell transmitters that receive
#  AX.25 packets from possibly multiple sources, and then what
#  to do on the AX.25 headers of those messages.
#
#  There is one transmitter per digipeater \-\- and inversely, there
#  can be at most one digipeater for each transmitter.
#
#  In each digipeater there is at least one <source>, usually same
#  as the transmitter.
#
#<digipeater>
#    transmitter     $mycall
#    #ratelimit      120      # default: max 120 packets/minute
#
#    <source>
#        source         $mycall
#    #   viscous\-delay  0     # no viscous delay for RF\->RF digipeat
#    #   ratelimit      120   # default: max 120 packets/minute
#    </source>
#\fI    #### NOTE: Some Tx\-iGate processing rules are not yet implemented\fR\fC
#    #<source>          # Adding APRSIS source makes this tx-igate
#    #    source        APRSIS
#    #    relay\-type    third\-party  # Must define this for APRSIS source!
#    #    viscous\-delay  5 # Recommendation: 5 seconds delay to give
#    #                     # RF delivery time make itself known.
#    #    filter         t/m  # Tx-iGate only messages sent to me by APRSIS
#    #</source>
#
#</digipeater>
\fR
.fi
.PP
.SH GLOBAL MYCALL PARAMETER
In majority of usage models, system needs single configured callsign.
This is set by using the
.B mycall
configuration option, and latter referred to in configurations as
.B $mycall
parameter in place of callsigns.
.PP
.SH APRSIS SECTION FOR APRSIS CONNECTIVITY
Settings in the
.B <aprsis>
section define connectivity with the APRS-IS network service.
.PP
Necessary option is
.IR server ,
and others are optional.
.PP
Available options are:
.IP "\fClogin $mycall\fR" 8em
The APRSIS network login.
Defaults to the
.B mycall
configuration entry.
.IP "\fCserver \fIserver-name 14850\fR" 8em
Define which APRS-IS is being connected to.
Multiple definitions are used in round-robin style,
if the connection with the previous one fails for some reason.
.PP
.IP "\fCfilter \fI'filter specs in quotes'\fC # \fIcomments" 8em
Set filter adjunct definitions on APRS-IS server.
Multiple entries are catenated together in entry order,
when connecting to the server.
.PP
.SH LOGGING SECTION
The
.B <logging>
section defines miscellaneous file names and options for state tracking and logging use.
.PP
.IP "\fCpidfile \fI@VARRUN@/aprx.pid\fR" 8em
The pidfile is UNIX way to tell that others that this program is
running with given process-id number.
This has compiled-in default value of: \fCpidfile @VARRUN@/aprx.pid
.IP "\fCrflog \fI@VARLOG@/aprx\-rf.log\fR" 8em
The
.I rflog
defines a rotatable file into which all RF-received packets are logged.
There is no default.
.IP "\fCaprxlog \fI@VARLOG@/aprx.log\fR" 8em
The
.I aprxlog
defines a rotatable file into which most important events on APRS-IS
connection are logged, namely connects and disconnects.
There is no default.
.IP "\fCerlangfile \fI@VARRUN@/aprx.state\fR" 8em
The
.I erlangfile
defines a mmap():able binary file, which stores running sums of interfaces
upon which the channel erlang estimator runs, and collects data.
Depending on the system, it may be running on a filesystem that actually
retains data over reboots, or it may not.
With this backing store, the system does not loose cumulating erlang data
over the current period, if the restart is quick, and does not stradle
any exact minute.
This file is around 0.7 MB per each interface talking APRS.
If this file is not defined and can not be created,
internal non-persistent in-memory storage will be used.
Built-in default value is: @VARRUN@/aprx.state
.IP "\fCerlang\-loglevel \fINONE\fR" 8em
The
.I erlang\-loglevel
is config file edition of the "\-l" option pushing erlang data to
.IR syslog (3).
Valid values are (possibly) following: NONE, LOG_DAEMON,
LOG_FTP, LOG_LPR, LOG_MAIL, LOG_NEWS, LOG_USER, LOG_UUCP,
LOG_LOCAL0, LOG_LOCAL1, LOG_LOCAL2, LOG_LOCAL3, LOG_LOCAL4,
LOG_LOCAL5, LOG_LOCAL6, LOG_LOCAL7.
If the parameter value is not acceptable, list of accepted
values are printed at startup.
.IP "\fCerlanglog \fI@VARLOG@/erlang.log\fR" 8em
The erlanglog defines a rotatable file into which erlang data
is written in text form.
There is no default.
.IP "\fCerlang\-log1min\fR" 8em
The
.I erlang\-log1min
option logs to syslog/file also 1 minute interval data from the program.
(In addition to 10m and 60m.)
Default is off.
.PP
.SH INTERFACE SECTIONS FOR RADIO PORTS
The
.B <interface>
sections define connections to radio modems.
Several different styles are available:
.IP \(bu 2
Local serial ports in the machine
.RB ( "device\-serial /dev/ttyS0 " "\fIspeed encapsulation\fR)"
.IP \(bu 2
Local USB serial ports in the machine
.RB ( "device\-serial /dev/ttyUSB0 " "\fIspeed encapsulation\fR)"
.IP \(bu 2
Remote served serial ports over a TCP stream.
Implemented to talk with Cisco AUX ports on "range 4000"
(TCP STREAM, no TELNET escapes)
.RB ( "tcp\-device 12.34.56.78 4001 " "\fIencapsulation\fR)"
.IP \(bu 2
Linux internal AX.25 network attached devices
.RB ( "ax25\-device CALLSIGN\-1" )
are only available when running on a Linux system.
On a non-Linux system it connects to a null interface, never
getting anything and can always sink everything.
.PP
The serial port name tells what kind of port is in question,
and while port baud-rate (9600) and character settings (8n1)
must always be set, they are ignored for the remote connection.
.PP
Following
.I speed
modes are available:
.br
.B "    " 1200,
.I 1800,
.B 2400, 4800, 9600, 19200,
.I 38400, 115200, 230400, 460800, 500000, 576000
.br
Likely available speeds are in bold, other supported values
are listed in italics.
.PP
Following
.I encapsulation
modes are available:
.TP 10em
.B TNC2
is capable only to monitor the packets reported by TNC2 type
debug output, and Rx-iGate, but they are not acceptable as
source for a <digipeater>.
.TP 10em
.B KISS
Basic KISS encapsulation.
No checksums.
.TP 10em
.B SMACK
.IR "Stuttgart Modified Amateurradio-CRC-KISS" ,
which runs CCITT-CRC16 checksum on KISS datastream much in the same
way as HDLC has CRC16 checksum on it.
.TP 10em
.B BPQCRC
XOR "checksum" on dataframes.
Also known as "XKISS", and "XORSUM".
This detects single bit failure, but weakly any multibit failures.
Extra 0x00 bytes have no effect on checksum, etc.
.PP
On
.BI "<kiss\-subif " "tncid" ">"
sub-options the parameter is
.IR tncid ,
which sets up KISS multiplexer parameter so that subsequent
options applies only on designated KISS sub-port.
.PP
The
.I callsign
option sets port specific callsign when relaying to APRS-IS.

.nf
\fC<interface>
   serial\-device /dev/ttyUSB1 19200 8n1 KISS
   tx\-ok         false          # receive only (default)
   callsign      OH2XYZ\-R2      # KISS subif 0
   initstring    "...."         # initstring option
   timeout       900            # 900 seconds of no Rx
</interface>

<interface>
   serial\-device /dev/ttyUSB1 19200 8n1 SMACK
   tx\-ok         false          # receive only (default)
   callsign      OH2XYZ\-R2      # KISS subif 0
   initstring    "...."         # initstring option
   timeout       900            # 900 seconds of no Rx
</interface>

<interface>
   serial\-device /dev/ttyUSB2 19200 8n1 KISS
   initstring    "...."
   timeout       900            # 900 seconds of no Rx
   <kiss\-subif 0>
      callsign OH2XYZ\-2
      tx\-ok    true             # This is our transmitter
   </kiss\-subif>
   <kiss\-subif 1>
      callsign OH2XYZ\-R3        # This is receiver
      tx\-ok    false            # receive only (default)
   </kiss\-subif>
</interface>

<interface>
   tcp\-device   172.168.1.1 4001 KISS
   tx\-ok         false          # receive only (default)
   callsign      OH2XYZ\-R4      # KISS subif 0
   initstring    "...."         # initstring option
   timeout       900            # 900 seconds of no Rx
</interface>

<interface>
   ax25\-device OH2XYZ\-6         # Works only on Linux systems
   tx\-ok       true             # This is also transmitter
</interface>

<interface> # \fBRX-IGATE ONLY, NOT USABLE AS DIGIPEATER SOURCE\fC
   serial\-device /dev/ttyUSB1 19200 8n1 TNC2
   callsign      OH2XYZ\-R6      # TNC2 has no sub-ports
   initstring    "...."         # initstring option
   timeout       900            # 900 seconds of no Rx
</interface>
.fi

.SH BEACON DEFINITIONS
The beacons are defined using
.B <beacon>
configuration sections.
.PP
Because classical beacon definitions are highly error\-prone, this program
has a new way to define them:
.IP \(bu 2
The new way to define beacons:
.nf
\fCbeacon symbol "R&" lat "6016.35N" lon "02506.36E"  \\\fR
\fC       comment "aprx \- an Rx\-only iGate" \fR
.fi

.IP \(bu 2
Semi-clasical definition of raw APRS packet:
.nf
\fCbeacon raw "!6016.35NR02506.36E&aprx \- an Rx\-only iGate"\fR

.fi
.PP
The fields and parameters:
.TP 12em
.B to
An
.I optional
"to" parameter tells that this beacon shall be sent only to interface whose
callsign is named.  Default is to send to all interfaces that have "tx\-ok true"
setting.

.TP 12em
.B type
An
.I optional
one character string parameter, with one of following
contents:  "!", "=", "/", "@", ";" and ")".

.TP 12em
.B for
An
.I optional
"for" parameter tells callsign which is claimed as this particular beacon source.
It must be valid AX.25 callsign in text format.
When this "for" parameter is not given, value of "mycall" configuration entry is used.

.TP 12em
.B name
An
.I optional
"name" parameter is for defining
.I items
and
.IR symbols ,
and it sets the name of the item/object to be defined.

.TP 12em
.B dest
An
.I optional
"dest" parameter defaults to "APRS", but can be used to define another value.

.TP 12em
.B via
An
.I optional
"via" parameter defaults to nothing, but can be used to define additional
"VIA" path tokens, for example: "WIDE1\-1".

.TP 12em
.B symbol
A
.I mandatory
"symbol" parameter is two character code, which for Rx-only iGate is pair: "R&"

.TP 12em
.B lat
This
.I mandatory
parameter defines
.I latitude
coordinate (that is: north/south.)
It is expected to be of format: "ddmm.mmN" where "dd" defines
.I two digits
of
.I degrees
of latitude, and "mm.mm" defines two digits + decimal dot + two digits of
.I minutes
of latitude.
Then comes literal "N" or "S" indicating hemisphere.

.TP 12em
.B lon
This 
.I mandatory
parameter defines
.I longitude
coordinate (that is: east/west.)
It is expected to be of format: "dddmm.mmE" where "ddd" defines
.I three digits
of
.I degrees
of longitude, and "mm.mm" defines two digits + decimal dot + two digits of
.I minutes
of longitude.
Then comes literal "E" or "W" indicating hemisphere.

.TP 12em
.B comment
This
.I optional
parameter defines commentary text tail on the beacon packet.
If you need characters outside US-ASCII character set, use of UTF-8 encoded
UNICODE character set is recommended.

.TP 12em
.B raw
This
.I alternate
format defines whole APRS packet content in raw text format.
.I Currently this type of packets are not validated for syntax at all!

.TP 12em
.B file
This
.I alternative
way defines path to a file with single text line defining
content of
.I raw
message data.

.PP
The type/symbol/lat/lon/comment-format supports only
a few types of APRS packets.
It splits input into small slices that are possible
to validate in detail.
(See "DEBUGGING SYSTEM" above.)

.SH DIGIPEATER
The
.I aprx
is possible to configure as a AX.25 digipeater with APRS twists.
This is done with
.B <digipeater>
configuration section and its subsections.
.PP
.I There can be at most one <digipeater> definition per each
.I transmit capable interface in the system.
.I On a system with multiple transmitters, this means there can
.I be multiple digipeaters, each with different behaviour rules.
.PP
Minimalistic setup for a digipeater will be as follows:
.nf
\fC
<digipeater>
    transmitter     $mycall
    <source>
        source      $mycall
    </source>
</digipeater>\fR
.fi
.PP
In minimalistic approach the system does digipeating of packets heard
on the
.I $mycall
interface back to same interface.
Single requirement is that the
.I <interface>
block has
.I "tx\-ok true"
setting on it.
.PP
In more complicated approaches it is possible to define multiple sources
for packets:
.IP \(bu 3
Multiple device ports.
.IP \(bu 3
APRSIS pseudoport, which creates the Tx-iGate functionality.
.PP
.SS <digipeater> options
Main-level <digipeater> options are:
.PP
.IP \(bu 3
.I transmitter
defines which interface the digipeater will output to.
.IP \(bu 3
.IR <trace> " and " <wide>
sub-options are explained below.
.IP \(bu 3
.I <source>
sub-option is explained below.
.PP
.SS <trace> and <wide> sub-options
The
.I <trace>
sub-option has priority over the
.I <wide>
sub-option, otherwise they are configured the same way.
.PP
The
.I <trace>
sub-option defines which AX.25 address contained keywords
are treated with APRS "New-N paradigm" rules in a way
where each processing node always marks its transmitter
callsign on the transmitted AX.25 packet address header.
.PP
The
.I <wide>
sub-option defines which AX.25 address contained keywords
are treated with APRS "New-N paradigm" rules in a way where
processing node does not mark its transmitter callsign
on the transmitted AX.25 packet address header.
.PP
Available parameters are:
.TP 8em
.B keys
A string of comma-separated set of string tokens:
.br
\fCkeys "TRACE,WIDE"\fR
.br
Alternative form for this entry is:
.br
\fCkeys "TRACE"\fR
.br
\fCkeys "WIDE"\fR
.TP 9em
.B maxdone
Defines maximum number of redistribution hops that these keywords
can have completed when reaching here.
If accounting finds more done, the system will just drop the packet
instead of digipeating it onwards.
.TP 9em
.B maxreq
Defines maximum number of redistribution hops that these keywords
can define.
If accounting finds more requested, the system will just drop
the packet instead of digipeating it onwards.
.PP
.SS <source> sub-options
Primary definer option is
.B source
which gives callsign of an
.I <interface>
from which the AX.25 packets are received for this
.I <source>
block.
.PP
Available
.B relay\-type
modes on <source> definitions are:
.TP 14em
.B digipeater
Normal AX.25 digipeater behaviour with APRS New-N paradigm support.
This is default mode.
.TP 14em
.B directonly
Digipeat only directly heard packets.
Useful for systems that are designated as "fill\-in".
See also "viscous\-delay".
.TP 14em
.B third\-party
Special mode for Tx-iGate.
.PP
The
.B viscous\-delay
defines a number of seconds from 0 (default) maximum of 9 that
the source will put the message on duplicate detector delay processing.
All occurrances of same packet per duplicate detector during that time
will be accounted on duplicate detection, and if at the end of the delay
period there are more than one hit, the packet is discarded.
Use delay of 0 seconds for normal digipeater, 5 seconds for a fill-in,
or a Tx-iGate.
.PP
A javAPRSSrvr filter-adjunct style rules are possible with the
.B filter
options.
When you want multiple filters, use multiple options with associated parameters:
.nf
\fC
    filter t/m            # APRS messaging type packets
    filter a/la/lo/la/lo  # APRS positional packets within this area
\fR
.fi
.LP
Also negative filters are possible (prefixed with minus character),
which upon match cause rejection of the packet.
Filters are evaluated in definition order, and first matching one will
terminate the evaluation.
When no filters are defined, everything is passed thru.
When any filter is defined, only those matching non-negative filters
are passed thru, and no default "pass everything else" behaviour exists.
.PP
The
.B <trace>
and
.B <wide>
sub-options exist also within each <source>.
Where such occur, the <source> specific <trace> sub-option
trumps the definition on <digipeater> level, and same with
<wide> sub-options.
This allows things like overriding flooding control keywords
on source basis, should such be necessary.
.PP
A set of
.B regex\-filter
rules can be used to reject packets that are not of approved kind.
Available syntax is:
.IP "regex\-filter source RE"
source address field
.IP "regex\-filter destination RE"
destination address field
.IP "regex\-filter via RE"
any via path field
.IP "regex\-filter data RE"
payload content
.PP
The regex\-filter exists as ad-hoc method when all else fails.
.PP
.SH NOTES: ERLANG
The
.I Erlang
is telecom measurement of channel occupancy, and in this application sense
it does tell how much traffic there is on the radio channel.
.PP
Most radio transmitters are not aware of all transmitters on channel,
and thus there can happen a collision causing loss of both messages.
The higher the channel activity, the more likely that collision is.
For further details, refer to statistical mathematics books, or perhaps
on Wikipedia.
.PP
In order to measure channel activity, the
.B aprx
program suite has these built-in statistics counter and summary estimators.
.PP
The
.I Erlag
value that the estimators present are likely somewhat
.I underestimating
the true channel occupancy simply because it calculates estimate of channel
bit transmit rate, and thus a per-minute character capacity.
It does not know true frequency of bit-stuffing events of the HDLC framing,
nor each transmitter pre- and port frame PTT times. The transmitters need to
stabilize their transmit oscillators in many cases, which may take up to
around 500 ms!
The counters are not aware of this preamble-, nor postamble-times.
.PP
The HDLC bit stuffing ratio is guessed to be 1:1.025 (1 extra bit every 5 bytes)

.SH NOTES: PROGRAM NAME
Initially this program had name
.IR aprsg-ng ,
which was too close to another (a less low-tech C++ approach) program had.

.SH BUGS/WARTS
The
.IR Erlang -monitor
mechanisms are of rudimentary quality, and can seriously underestimate
the channel occupancy by ignoring pre- and postample transmissions.
.PP
On serial lines supports really only 8n1 mode, not at all like: 7e1.
On the other hand, there really is no sensible usage for anything but 8n1...

.SH SEE ALSO
Couple web sites:
.IR "http://www.aprs-is.net/" ,
.IR "http://www.aprs2.net/" ,
.I "http://wiki.ham.fi/Aprx.en"
.PP
.BR aprx-stat (8)

.SH AUTHOR
This little piece was written by
.I "Matti Aarnio, OH2MQK"
during a dark and rainy fall and winter of 2007-2008 after a number
of discussions grumbling about current breed of available software
for APRS iGate use in Linux (or of any UNIX) platforms.
Fall and winter 2009-2010 saw appearance of digipeater functionality.
.PP
Principal contributors and test users include:
.IR "Pentti Gronlund, OH3BK" ,
.IR "Reijo Hakala, OH1GWK" .
Debian packaging by
.IR "Kimmo Jukarinen, OH3GNU" .
Testing of SMACK variant of KISS by
.IR "Patrick Hertenstein, DL1GHN" .
