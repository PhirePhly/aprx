.TH aprx 8 "@DATEVERSION@"
.LO 8
.SH NAME
.B aprx
\- A receive-only APRS iGate application,
.SH SYNOPSIS
.B aprx
.RB [ \-d [ d [ d ]]]
.RB [ \-e ]
.RB [ \-v ]
.RB [ \-l " \fIsyslogfacilityname\fR]"
.RB [ \-f " \fI@CFGFILE@\fR]"
.SH DESCRIPTION
.B aprx
is a
.I receive-only
APRS iGate application with minimum system support technology requirements.
.PP
.IP \(bu 3
Does not require machine to have any other software in it, than things in libc.
In particular no special AX.25 libraries at all, nor widgets or even
C++ runtime.
.IP \(bu 3
Can listen "TNC2 monitor" and "KISS" speaking TNCs on any serial ports.
.IP \(bu 3
The serial port can be ordinary host computer port, a USB serial port, or 
remote port on a remote server behind the internet, like cisco router AUX
ports (port 4001, TCP STREAM without TELNET escapes.)
.IP \(bu 3
Does not require machine to have AX.25 protocol support internally!
(Thus this works also on e.g. Solaris and BSD machines without PF\_AX25 sockets.)
.IP \(bu 3
On Linux machine with kernel internal AX.25 protocol support, can listen
on it with promiscuous mode, and in order to use that, must be started
as
.I root
user, and be configured to list interface callsigns that APRS packets are
coming in.
The AX.25 socket listening is
.I not
configurable, it is always exists in Linux systems, and related
configuration parameters are ignored in other platforms.
This socket listening does not need "libax25" to function.
.IP \(bu 3
Not running the program as root is a viable option at least against
remote serial port servers.  One must change local serial port ownership
or access-groups (if any are used) to userid that runs the program and
possibly do several changes of file paths in configuration file beginning
with its location (startup parameter).
How that is done is up to the user of this program.
.IP \(bu 3
Connects with one callsign-ssid pair to APRS-IS core for all received radio
ports.
.IP \(bu 3
Knows that messages with following tokens in AX.25 VIA fields are not to be
relayed into APRS-IS network:
.RS 9
.B "RFONLY, NOGATE, TCPIP, TCPXX"
.RE
.IP \(bu 3
Knows that following source address prefixes are bogus and thus messages with
them are to be junked:
.RS 9
.B "WIDE, RELAY, TRACE, TCPIP, TCPXX, NOCALL, N0CALL"
.RE
.IP \(bu 3
Drops all
.I query
messages ("?").
.IP \(bu 3
Opens up all 3rd party messages ("}"), and checks the internal data if it is OK
to be gated out to APRS-IS.
.IP \(bu 3
Has built-in "Erlang monitor" mechanism that telemeters each receiving
interface to APRS-IS.
It can also syslog the interface specific channel occupancy, and
optionally can output to STDOUT.
.IP \(bu 3
Can be run on systems without writable storage, even with very little storage,
like on NSLU2, and OpenWrt platforms.
.PP
.SH OPTIONS
The
.B aprx
has following runtime options:
.TP
.B "\-d"
Turn on verbose debugging, outputs data to STDOUT.
.TP
.B "\-dd"
the "more debug" mode shows also details of network interaction with
the APRS-IS network service.
.TP
.B "\-ddd"
the "even more debug" mode shows also detail classification of
every kind of frame received in KISS variants.
.TP
.B "\-e"
.I "Erlang output"
prints 10 minute and 60 minute traffic accumulation byte counts, and guestimates
on channel occupancy, alias "Erlang".
These outputs are sent to STDOUT, which system operator may choose to log elsewere.
This is independent if the "\-l" option below.
.TP
.BI "\-f " "@CFGFILE@"
Configuration file, given path is built-in default, and can be overridden by the program runner.
.TP
.BR "\-l" " \fIsyslogfacilityname\fR"
Defines
.RB syslog (3)
facility code used by the erlang reporter by defining its name.
Default value is:
.BR NONE ,
and accepted values are:
.BR LOG_DAEMON ,
.BR LOG_FTP ,
.BR LOG_LPR ,
.BR LOG_MAIL ,
.BR LOG_NEWS ,
.BR LOG_USER ,
.BR LOG_UUCP ,
.BR LOG_LOCAL0 ,
.BR LOG_LOCAL1 ,
.BR LOG_LOCAL2 ,
.BR LOG_LOCAL3 ,
.BR LOG_LOCAL4 ,
.BR LOG_LOCAL5 ,
.BR LOG_LOCAL6 ,
.BR LOG_LOCAL7 .
That list is subject to actual facility code set in the system,
and in any case if you specify a code that is not known, then the program
will complain during the startup, and report it.
This is independent of the "\-e" option above.
.TP
.B "\-v"
Verbose logging of received traffic to STDOUT.
Lines begin with reception timestamp (UNIX time_t seconds), then TAB,
and either data as is, or with prefix byte: "*" for "discarded due to data content",
or possibly "#" for "discarded due to APRS-IS being unreachable".
.PP
.SS DEBUGGING SYSTEM
Use parameter set 
.B "\-ddv"
(or
.BR "\-dddv" )
to test new configuration by running it synchronously to console.
.PP
.SS NORMAL OPERATION
Running the
.B aprx
program without any of option flags:
.BR "\-d" ,
.BR "\-v" ", or"
.B "\-e"
reads possibly given configuration, then automatically backgrounds the process, and writes
.IR pidfile .
When the process whose number written in
.I pidfile
is then sent a SIGTERM signal, it automatically shuts down itself, and removes the
.IR pidfile .
The
.I pidfile
can be runtime configured with the
.BI \-f " @CFGFILE@"
file, and it has default name of:
.IR "@VARRUN@/aprx.pid" .
.PP

.SH CONFIGURATION FILE
The configuration file is used to setup the program to do its job.
Some configurations can be done without the file, namely a channel
.I "Erlang monitor"
siphoning APRS packets off the Linux kernel AX.25 network stack.
.PP
.PP
On the configuration file, following additional notes
.IP \(bu 2
Most parameters are singletons, that is, there can be only one.
.IP \(bu 2
There can be unlimited number of "aprsis-server" lines, and each
can be followed by own "aprsis-heartbeat-timeout", and "aprsis-filter"
lines.
.IP \(bu 2
There can be unlimited number of "radio" lines.
.IP \(bu 2
There can be unlimited number of "netbeacon" lines.
.IP \(bu 2
There can be unlimited number of "ax25-filter" lines.
.IP \(bu 2
There can be unlimited number of "ax25-rxport" lines.
.PP
The configuration file is read upon program start,
it is never re-read during process life.
.nf
\fC
#
#  Sample configuration file for the APRX \-\- an Rx\-only APRS iGate
#

<aprsis>
# The  aprsis-login  parameter: 
# Station call\-id used for relaying APRS frames into APRS\-IS.
# This value MUST NOT match any possible AX.25 interface in
# the system!  Ignore this at your own peril...  The Call\-SSIDs
# SSID value do not need to be numeric 1..15, "\-R1" works too.
#
#login      N0CALL\-R1

# APRS-IS server name and portnumber.
# Every reconnect does re\-resolve the name to IP address.
# There can be as many definitions as you want, and they will be
# used in round\-robin fashion.  Heartbeat and filter definitions
# must follow each server definition.
#
#server    rotate.aprs.net    14580
#server    finland.aprs2.net  14580
#server    igates.aprs.fi     14580

# Some APRS\-IS servers tell every about 20 seconds to all contact
# ports that they are there and alive. Others are just silent.
# Enable only if the server you use does present heartbeat.
# Recommended value 3*"heartbeat" + some  \-> 120 (seconds)
#
#heartbeat\-timeout   120

# APRS\-IS server may support some filter commands.  Although this
# program does not transmit out to RF, filter rules can be used to
# ensure that there is sufficient dataflow from APRS\-IS server to
# this program that it very likely will not timeout within network
# monitoring timeout..
#
#filter "some filter specs in quotes"
</aprsis>



# pidfile is UNIX way to tell that others that this program is
# running with given process-id number.  This has compiled-in
# default value of:  pidfile @VARRUN@/aprx.pid
#
#pidfile @VARRUN@/aprx.pid

<logging>
# rflog defines a rotatable file into which all RF-received packets
# are logged.
#
#rflog @VARLOG@/aprx\-rf.log

# aprxlog defines a rotatable file into which most important 
# events on APRS\-IS connection are logged, namely connects and
# disconnects.
#
#aprxlog @VARLOG@/aprx.log

# erlangfile defines a mmap():able binary file, which stores
# running sums of interfaces upon which the channel erlang
# estimator runs, and collects data.
# Depending on the system, it may be running on a filesystem
# that actually retains data over reboots, or it may not.
# With this backing store, the system does not loose cumulating
# erlang data over the current period, if the restart is quick,
# and does not stradle any exact minute.
# (Do restarts at 15 seconds over an even minute..)
# This file is around 0.5 MB per each interface talking APRS.
# Things go BADLY WRONG if this file can not be created or
# it is corrupted!
#
# Built\-in default value is: @VARRUN@/aprx.state
#
erlangfile @VARRUN@/aprx.state

# erlang\-loglevel is config file edition of the "\-l" option
# pushing erlang data to syslog(3).
# Valid values are (possibly) following: NONE, LOG_DAEMON,
# LOG_FTP, LOG_LPR, LOG_MAIL, LOG_NEWS, LOG_USER, LOG_UUCP,
# LOG_LOCAL0, LOG_LOCAL1, LOG_LOCAL2, LOG_LOCAL3, LOG_LOCAL4,
# LOG_LOCAL5, LOG_LOCAL6, LOG_LOCAL7.  If the parameter value is
# not acceptable, list of accepted values are printed at startup.
#
#erlang\-loglevel NONE

# erlanglog defines a rotatable file into which erlang data
# is written in text form.
#
#erlanglog @VARLOG@/erlang.log

# erlang\-log1min option logs to syslog/file also 1 minute
# interval data from the program. (In addition to 10m and 60m.)
#
#erlang\-log1min
</logging>

# AX.25 filters block selected messages matching on selected regular
# expressions.  The expressions are case sensitive, and AX.25 address
# elements are in all uppercase text.  There can be unlimited number
# of patterns, type fields are four: "source", "destination", "via",
# and "data".  These patterns can be used in addition to built\-in
# hard\-coded reject rules listed in documentation.
#
#ax25\-filter source      "^NOCALL"
#ax25\-filter destination "^NOCALL"
#ax25\-filter via         "^NOGATE"
#ax25\-filter data        "^\\\\?"


# ax25\-device  Lists AX.25 ports by their callsigns that in Linux
#              systems receive APRS packets.  If none are defined,
#              the AX.25 network receiver is not enabled.
#
# tx\-ok        Boolean telling if this device is able to transmit.
#
#<interface>
#   ax25\-device N0CALL
#   tx\-ok false
#</interface>


# The  radio serial   option.  Parameters are:
#   \- /dev/ttyUSB1    \-\- tty device
#   \- 19200           \-\- baud rate, supported ones are:
#                        1200, 2400, 4800, 9600, 19200, 38400
#   \- 8n1             \-\- 8\-bits, no parity, one stop\-bit,
#                        no other supported modes
#   \- KISS/XORSUM/SMACK \-\- KISS mode variants
#     TNC2            \-\- non\-KISS text format variant
#
#
#  "KISS"                  \- plain basic KISS mode
#  "XORSUM" alias "BPQCRC" \- KISS with BPQ "CRC" byte
#  "SMACK"  alias "CRC16"  \- KISS with better CRC
#  "TNC2"                  \- TNC2 monitor format
#
# Additional/alternate options for the serial-device
#
# "timeout 900" sets a timeout monitor (in seconds) to make
#    reopen/reconnect if the (tcp) connection to radio has
#    failed somehow and nothing is heard. Local serial ports
#    do not (in general) need this.  At APRS silent sites
#    this may cause repeated reconnects, but it should not
#    harm either.  At busy sites this will handle reconnect
#    gracefully in case of network failures, and timeout
#    value can be shortened.
#
# "<kiss\-subif 0>" sets optional multiplexer index on KISS type
#    connections. This id is specific for the multiplexer connection
#    on given port, and can be in range of 0 thru 7 for SMACK type
#    links, and up to 15 for KISS, and BPQ type links. 
#    The kiss-subif is settable only for KISS-type connections.
#    The subif 0 is settable for TNC2 monitor format.
#
# "callsign NAME" sets callsign used in statistics displays,
#    and when the message is sent to APRS-IS.
#    If none are given, then it will use physical port name.
#    There can be multiple callsign parameters, if each are
#    prefixed with their own  tncid  setting.
#
# "tx\-ok true" enables transmit. System will then also require
#    that used callsign is valid for AX.25.
#
# "initstring" is of two parts, the keyword, and then a string.
#    initstring "\\xC0\\xC0\\xFF\\xC0\\r\\nMO 0\\rKISS $01\\r"
#    The initstring is a binary string,  "\\x00" is encodable.
#    Of the usual C-style codes only "\\r" and "\\n" are understood.
#    The initstring is kiss-subif level option.
#
#
#<interface>
# serial\-device   /dev/ttyUSB0  19200 8n1    KISS
# <kiss\-subif 0>
#    callsign N0CALL\-14
#    tx\-ok    false
# </kiss\-subif>
#</interface>
#
#<interface>
# serial\-device   /dev/ttyUSB1  19200 8n1    TNC2
# <kiss\-subif 0>  # Actually it is not KISS subif, but "0" works for TNC2
#   callsign N0CALL\-13
# </kiss\-subif>
#</interface>



# The  radio tcp   option defines a connection to remote socket
# beyond which is a binary transparent connection to a serial
# port.  The parameter fields:  literal IP address (IPv4 or IPv6),
# then literal port number, and finally protocol mode.
# KISS-protocol parameters are same as with normal serial port.
#
#<interface>
# tcp\-device  12.34.56.78  4001  KISS
# timeout 900 
# <kiss\-subif 0>
#    callsign N0CALL\-12
#    tx\-ok    false
# </kiss\-subif>
#</interface>
#
#<interface>
# tcp\-device  12.34.56.78  4002  TNC2
# timeout 300
# <kiss\-subif 0>
#    callsign N0CALL\-12
#    tx\-ok    false
# </kiss\-subif>
#</interface>
#

# The  netbeacon  options.
# Parameter string (in quotes) is sent to network (without quotes)
# at varying intervals \-\-  1200\-1800 seconds in between restransmits.
# This interval is intentionally randomized.
#
# Multiple netbeacons are evenly distributed for each time period,
# or at least 3 seconds apart.  First netbeacon is sent to network
# 30 seconds after connection to APRS-IS.
#
# There can be multiple netbeacon options.
# The parameter sets can vary:
#  a) 'for nnn-n dest "string" symbol "R&" lat "ddmm.mmN" lon "dddmm.mmE" [comment "any text"]
#  b) 'for nnn-n dest "string" raw "string"'
# The a) form flags on some of possible syntax errors in parameters.
# It will also create only "!" type messages.  The dest parameter
# defaults to "APRS", but can be used to give other destinations.
# The via parameter can be used to add other keywords, like "NOGATE".
#
# Symbol  R&   is for "rx\-only iGate"
#
#netbeacon for N0CALL-13 dest "APRS" symbol "R&" lat "6016.35N" lon "02506.36E" comment "aprx \- an Rx\-only iGate"
#netbeacon for N0CALL-14 dest "APRS" raw "!6016.35NR02506.36E&aprx \- an Rx\-only iGate"
\fR
.fi
.PP
In the configuration file there is special treatment for quoted strings.
They are stripped of the outer quotes, and "\fC\\\fR" character is processed within
the source string to produce an output string.
The escapes are:
.TP
.B "\fC\\\\n"
Produces newline character (Control-J) on the output string.
.TP
.B "\fC\\\\r"
Produces carriage return character (Control-M) on the output string.
.TP
.B "\fC\\\\\\\\"
Places a back-slash on the output string.
.TP
.B "\fC\\\\""
.\" foo "
Places a double-quote on the output string.
.TP
.B "\fC\\\\'"
Places a single-quote on the output string.
.TP
.B "\fC\\\\xHH"
Lower-case "x" precedes two hex digits which ensemble is then converted to a single byte in the output string.
.PP
The complex encodings are for possible init-strings of the external devices,
.I "however: a nul byte is not possible to produce as it terminates a string!"
( = "\fC\\x00\fR" )
.PP
A configuration token without surrounding quotes does not understand the backslash escapes.


.SH RADIO PORTS
Radio ports can be connected several ways to this program:
.IP \(bu 2
AX.25 network interfaced ports (Linux, kissattach et al.)
.IP \(bu 2
Local serial ports in the machine
.RI ( " radio serial /dev/ttyS0 " )
.IP \(bu 2
Local USB serial ports in the machine
.RI ( " radio serial /dev/ttyUSB0 " )
.IP \(bu 2
Remote served serial ports over a TCP stream.
.RI ( " radio tcp 12.34.56.78 4001 " )
.br
Implemented to talk with Cisco AUX ports on "range 4000"
(TCP STREAM, no TELNET escapes)
.PP
The serial port name tells what kind of port is in question,
and while port baud-rate (9600) and character settings (8n1)
must always be set, they are ignored for the remote connection.
.PP
The KISS encapsulation details must also be specified, and they
are used in all cases.
.PP
The
.I tncid
option sets up KISS multiplexer parameter so that subsequent
.I callsign
option applies only on designated sub-port.
Default value is zero (0).
.PP
The
.I callsign
option sets port specific callsign when relaying to APRS-IS.

.SH NETBEACON definitions
Because classical netbeacon definitions are highly error-prone, this program
has a new way to define them:
.IP \(bu 2
The new way to define netbeacons, however do note that these will be only
messages of type "!":

.nf
\fCnetbeacon for N0CALL-13 symbol "R&" lat "6016.35N" lon "02506.36E"\fR
\fC       comment "aprx - an Rx-only iGate" \fR
.fi

(the line is folded for this document)

.IP \(bu 2
Semi-clasical definition of raw APRS packet:

.nf
\fCnetbeacon for N0CALL-14 raw "!6016.35NR02506.36E&aprx - an Rx-only iGate"\fR
.fi

.IP \(bu 2
Classical definition of raw APRS packet, albeit given in quotes.
The "for" callsign will be that of "mycall" parameter, which is
.B invalid
for radio network in above recommended form!
.B Do not use this form!

.nf
\fCnetbeacon "!6016.35NR02506.36E&aprx - an Rx-only iGate"\fR
.fi
.PP
The fields and parameters:
.IP for 8
The
.I optional
"for" parameter tells callsign which is claimed as this particular beacon source.
It must be valid AX.25 callsign in text format.
When this "for" parameter is not given, value of "mycall" configuration entry is used.

.IP dest 8
The
.I optional
"dest" parameter defaults to "APRS", but can be used to define another value.

.IP via 8
The
.I optional
"via" parameter defaults to nothing, but can be used to define additional
"VIA" path tokens, for example: "NOGATE".

.IP symbol 8
The "symbol" parameter is two character code, which for Rx-only iGate is pair: "R&"

.IP lat 8
This defines
.I latitude
coordinate (that is: north/south.)
It is expected to be of format: "ddmm.mmN" where "dd" defines
.I two digits
of
.I degrees
of latitude, and "mm.mm" defines two digits + decimal dot + two digits of
.I minutes
of latitude.
Then comes literal "N" or "S" indicating hemisphere.

.IP lon 8
This defines
.I longitude
coordinate (that is: east/west.)
It is expected to be of format: "dddmm.mmE" where "ddd" defines
.I three digits
of
.I degrees
of longitude, and "mm.mm" defines two digits + decimal dot + two digits of
.I minutes
of longitude.
Then comes literal "E" or "W" indicating hemisphere.

.IP comment 8
Defines commentary tail on the message.

.IP raw 8
Defines whole packet in raw AX.25 text format.

.PP
The symbol/lat/lon/comment-format supports only "!"-type APRS messages
for beacons.
It splits input into small slices that are a bit simpler to validate
(see "DEBUGGING SYSTEM" above)


.SH NOTES: ERLANG
The
.I Erlang
is telecom measurement of channel occupancy, and in this application sense
it does tell how much traffic there is on the radio channel.
.PP
Most radio transmitters are not aware of all transmitters on channel,
and thus there can happen a collision causing loss of both messages.
The higher the channel activity, the more likely that collision is.
For further details, refer to statistical mathematics books, or perhaps
on Wikipedia.
.PP
In order to measure channel activity, the
.B aprx
program suite has these built-in statistics counter and summary estimators.
.PP
The
.I Erlag
value that the estimators present are likely somewhat
.I underestimating
the true channel occupancy simply because it calculates estimate of channel
bit transmit rate, and thus a per-minute character capacity.
It does not know true frequency of bit-stuffing events of the HDLC framing,
nor each transmitter pre- and port frame PTT times. The transmitters need to
stabilize their transmit oscillators in many cases, which may take up to
around 500 ms!
The counters are not aware of this preamble-, nor postamble-times.
.PP
The HDLC bit stuffing ratio is guessed to be 1:1.025 (1 extra bit every 5 bytes)

.SH NOTES: PROGRAM NAME
Initially this program had name
.IR aprsg-ng ,
which was too close to another (a less low-tech C++ approach) program had.

.SH BUGS/WARTS
The
.IR Erlang -monitor
mechanisms are of rudimentary quality, and can seriously underestimate
the channel occupancy by ignoring pre- and postample transmissions.
.PP
On SMACK links there is no full-form of multi-TNC support.
Run with only one TNC on link, its id can be any in 0..7 range.
.PP
On serial lines supports really only 8n1 mode, not at all like: 7e1.
On the other hand, there really is no sensible usage for anything but 8n1...

.SH SEE ALSO
Couple web sites:
.IR "http://www.aprs-is.net/" ,
.IR "http://www.aprs2.net/" ,
.I "http://wiki.ham.fi/Aprx.en"
.PP
.BR aprx-stat (8)

.SH AUTHOR
This little piece was written by
.I "Matti Aarnio, OH2MQK"
during a dark and rainy fall and winter of 2007-2008 after a number
of discussions grumbling about current breed of available software
for APRS iGate use in Linux (or of any UNIX) platforms.
.PP
Principal contributors and test users include:
.IR "Pentti Gronlund, OH3BK" ,
.IR "Reijo Hakala, OH1GWK" .
Debian packaging by
.IR "Kimmo Jukarinen, OH3GNU" .
Testing of SMACK variant of KISS by
.IR "Patrick Hertenstein, DL1GHN" .
